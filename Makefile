# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/StepMania
pkglibdir = $(libdir)/StepMania
pkgincludedir = $(includedir)/StepMania
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
bin_PROGRAMS = stepmania$(EXEEXT) $(am__EXEEXT_1)
#noinst_PROGRAMS = $(am__EXEEXT_2)
am__append_1 = ScreenGameplayMultiplayer.cpp ScreenGameplayMultiplayer.h ScreenSMOnlineLogin.cpp ScreenSMOnlineLogin.h
am__append_2 = arch/LoadingWindow/LoadingWindow_Gtk.cpp arch/LoadingWindow/LoadingWindow_Gtk.h
am__append_3 = arch/Sound/RageSoundDriver_OSS.cpp arch/Sound/RageSoundDriver_OSS.h
am__append_4 = arch/Sound/ALSA9Dynamic.cpp arch/Sound/ALSA9Dynamic.h arch/Sound/ALSA9Functions.h \
	 arch/Sound/ALSA9Helpers.cpp arch/Sound/ALSA9Helpers.h \
	 arch/Sound/RageSoundDriver_ALSA9.cpp arch/Sound/RageSoundDriver_ALSA9.h \
	 arch/Sound/RageSoundDriver_ALSA9_Software.cpp arch/Sound/RageSoundDriver_ALSA9_Software.h


# Add this to AM_CXXFLAGS, not stepmania_CXXFLAGS: that'll cause multiple copies of
# several sources to be built. We link to this at runtime, so don't add ALSA_LDFLAGS.
am__append_5 = $(ALSA_CFLAGS)
#am__append_6 = arch/MovieTexture/MovieTexture_FFMpeg.cpp arch/MovieTexture/MovieTexture_FFMpeg.h
#am__append_7 = arch/LoadingWindow/LoadingWindow_SDL.cpp arch/LoadingWindow/LoadingWindow_SDL.h
#am__append_8 = SDL_utils.cpp SDL_utils.h
#InputHandler_SDL depends on LowLevelWindow_SDL
##am__append_9 = arch/InputHandler/InputHandler_SDL.cpp arch/InputHandler/InputHandler_SDL.h
##am__append_10 = arch/LowLevelWindow/LowLevelWindow_SDL.cpp arch/LowLevelWindow/LowLevelWindow_SDL.h

# InputHandler_X11 depends on LowLevelWindow_X11
am__append_11 = arch/InputHandler/InputHandler_X11.cpp arch/InputHandler/InputHandler_X11.h
am__append_12 =  \
	arch/LowLevelWindow/LowLevelWindow_X11.cpp \
	arch/LowLevelWindow/LowLevelWindow_X11.h \
	archutils/Unix/X11Helper.cpp \
	archutils/Unix/X11Helper.h

# Platform-specific drivers:
am__append_13 = arch/ArchHooks/ArchHooks_Unix.cpp arch/ArchHooks/ArchHooks_Unix.h
am__append_14 = arch/Threads/Threads_Pthreads.cpp arch/Threads/Threads_Pthreads.h
am__append_15 = arch/Lights/LightsDriver_LinuxWeedTech.cpp \
	arch/Lights/LightsDriver_LinuxWeedTech.h \
	arch/Lights/LightsDriver_LinuxParallel.cpp \
	arch/Lights/LightsDriver_LinuxParallel.h
am__append_16 = archutils/Unix/AssertionHandler.cpp \
		archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
		archutils/Unix/SignalHandler.cpp archutils/Unix/SignalHandler.h \
		archutils/Unix/LinuxThreadHelpers.cpp archutils/Unix/LinuxThreadHelpers.h \
		archutils/Unix/RunningUnderValgrind.cpp archutils/Unix/RunningUnderValgrind.h \
		archutils/Unix/EmergencyShutdown.cpp archutils/Unix/EmergencyShutdown.h

am__append_17 = archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
		archutils/Unix/BacktraceNames.cpp archutils/Unix/BacktraceNames.h \
		archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
		archutils/Unix/CrashHandlerChild.cpp archutils/Unix/CrashHandlerInternal.h

am__append_18 = arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp arch/MemoryCard/MemoryCardDriverThreaded_Linux.h
am__append_19 = arch/InputHandler/InputHandler_Linux_Joystick.h arch/InputHandler/InputHandler_Linux_Joystick.cpp
am__append_20 = RageSoundReader_Vorbisfile.cpp RageSoundReader_Vorbisfile.h
am__append_21 = RageSoundReader_MP3.cpp RageSoundReader_MP3.h

# Compile NetworkSyncManager even if networking is disabled; it'll stub itself.
am__append_22 = ezsockets.cpp ezsockets.h
am__append_23 = GtkModule.so
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/config.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/autoconf/m4/alsa.m4 \
	$(top_srcdir)/autoconf/m4/audio.m4 \
	$(top_srcdir)/autoconf/m4/backtrace.m4 \
	$(top_srcdir)/autoconf/m4/gtk-2.0.m4 \
	$(top_srcdir)/autoconf/m4/iconv.m4 \
	$(top_srcdir)/autoconf/m4/lua.m4 \
	$(top_srcdir)/autoconf/m4/opengl.m4 \
	$(top_srcdir)/autoconf/m4/sdl.m4 \
	$(top_srcdir)/autoconf/m4/tls.m4 \
	$(top_srcdir)/autoconf/m4/zlib.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
am__EXEEXT_1 = GtkModule.so$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
am__EXEEXT_2 = test_audio_readers$(EXEEXT) test_file_readers$(EXEEXT) \
	test_file_errors$(EXEEXT) test_timing_data$(EXEEXT) \
	test_threads$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am__GtkModule_so_SOURCES_DIST =  \
	arch/LoadingWindow/LoadingWindow_GtkModule.cpp
am_GtkModule_so_OBJECTS =  \
	GtkModule_so-LoadingWindow_GtkModule.$(OBJEXT)
GtkModule_so_OBJECTS = $(am_GtkModule_so_OBJECTS)
am__DEPENDENCIES_1 =
GtkModule_so_DEPENDENCIES = $(am__DEPENDENCIES_1)
am__stepmania_SOURCES_DIST = Screen.cpp Screen.h ScreenAttract.cpp \
	ScreenAttract.h ScreenBookkeeping.cpp ScreenBookkeeping.h \
	ScreenBranch.cpp ScreenBranch.h ScreenCenterImage.cpp \
	ScreenCenterImage.h ScreenCredits.cpp ScreenCredits.h \
	ScreenDebugOverlay.cpp ScreenDebugOverlay.h \
	ScreenDemonstration.cpp ScreenDemonstration.h \
	ScreenDimensions.h ScreenEdit.cpp ScreenEdit.h \
	ScreenEditCoursesMenu.cpp ScreenEditCoursesMenu.h \
	EditCoursesSongMenu.cpp EditCoursesSongMenu.h \
	ScreenEditMenu.cpp ScreenEditMenu.h ScreenEnding.cpp \
	ScreenEnding.h ScreenEndlessBreak.cpp ScreenEndlessBreak.h \
	ScreenEvaluation.cpp ScreenEvaluation.h ScreenExit.cpp \
	ScreenExit.h ScreenNetEvaluation.cpp ScreenNetEvaluation.h \
	ScreenNetSelectMusic.cpp ScreenNetSelectMusic.h \
	ScreenNetSelectBase.cpp ScreenNetSelectBase.h \
	ScreenNetRoom.cpp ScreenNetRoom.h ScreenEz2SelectMusic.cpp \
	ScreenEz2SelectMusic.h ScreenEz2SelectPlayer.cpp \
	ScreenEz2SelectPlayer.h ScreenGameplay.cpp ScreenGameplay.h \
	ScreenHowToPlay.cpp ScreenHowToPlay.h ScreenInstructions.cpp \
	ScreenInstructions.h ScreenJukebox.cpp ScreenJukebox.h \
	ScreenLogo.cpp ScreenLogo.h ScreenMapControllers.cpp \
	ScreenMapControllers.h ScreenMessage.cpp ScreenMessage.h \
	ScreenMiniMenu.cpp ScreenMiniMenu.h ScreenMusicScroll.cpp \
	ScreenMusicScroll.h ScreenNameEntry.cpp ScreenNameEntry.h \
	ScreenNameEntryTraditional.cpp ScreenNameEntryTraditional.h \
	ScreenOptions.cpp ScreenOptions.h ScreenOptionsMaster.cpp \
	ScreenOptionsMaster.h ScreenOptionsMasterPrefs.cpp \
	ScreenOptionsMasterPrefs.h ScreenPackages.cpp ScreenPackages.h \
	ScreenPlayerOptions.cpp ScreenPlayerOptions.h \
	ScreenNetworkOptions.h ScreenNetworkOptions.cpp \
	ScreenProfileOptions.cpp ScreenProfileOptions.h \
	ScreenPrompt.cpp ScreenPrompt.h ScreenRanking.cpp \
	ScreenRanking.h ScreenReloadSongs.cpp ScreenReloadSongs.h \
	ScreenSandbox.cpp ScreenSandbox.h ScreenSaveSync.cpp \
	ScreenSaveSync.h ScreenSelect.cpp ScreenSelect.h \
	ScreenSelectCharacter.cpp ScreenSelectCharacter.h \
	ScreenSelectDifficulty.cpp ScreenSelectDifficulty.h \
	ScreenSelectGroup.cpp ScreenSelectGroup.h \
	ScreenSelectMaster.cpp ScreenSelectMaster.h \
	ScreenSelectMode.cpp ScreenSelectMode.h ScreenSelectMusic.cpp \
	ScreenSelectMusic.h ScreenSelectStyle.cpp ScreenSelectStyle.h \
	ScreenSyncOverlay.cpp ScreenSyncOverlay.h \
	ScreenSystemLayer.cpp ScreenSystemLayer.h ScreenSetTime.cpp \
	ScreenSetTime.h ScreenSongOptions.cpp ScreenSongOptions.h \
	ScreenSplash.cpp ScreenSplash.h ScreenStage.cpp ScreenStage.h \
	ScreenTest.cpp ScreenTest.h ScreenTestFonts.cpp \
	ScreenTestFonts.h ScreenTestInput.cpp ScreenTestInput.h \
	ScreenTestLights.cpp ScreenTestLights.h ScreenTestSound.cpp \
	ScreenTestSound.h ScreenTextEntry.cpp ScreenTextEntry.h \
	ScreenTitleMenu.cpp ScreenTitleMenu.h ScreenUnlock.cpp \
	ScreenUnlock.h ScreenWithMenuElements.cpp \
	ScreenWithMenuElements.h ScreenGameplayMultiplayer.cpp \
	ScreenGameplayMultiplayer.h ScreenSMOnlineLogin.cpp \
	ScreenSMOnlineLogin.h ActorCommands.cpp ActorCommands.h \
	Attack.cpp Attack.h AutoKeysounds.cpp AutoKeysounds.h \
	BackgroundUtil.cpp BackgroundUtil.h BannerCache.cpp \
	BannerCache.h CatalogXml.cpp CatalogXml.h Character.cpp \
	Character.h CodeDetector.cpp CodeDetector.h Command.cpp \
	Command.h CommonMetrics.cpp CommonMetrics.h Difficulty.cpp \
	Difficulty.h EnumHelper.cpp EnumHelper.h Course.cpp Course.h \
	CourseUtil.cpp CourseUtil.h DateTime.cpp DateTime.h Font.cpp \
	Font.h FontCharAliases.cpp FontCharAliases.h FontCharmaps.cpp \
	FontCharmaps.h Game.cpp Game.h GameCommand.cpp GameCommand.h \
	GameConstantsAndTypes.cpp GameConstantsAndTypes.h \
	GameInput.cpp GameInput.h Grade.cpp Grade.h HighScore.cpp \
	HighScore.h Inventory.cpp Inventory.h LuaFunctions.h \
	LuaReference.cpp LuaReference.h LyricsLoader.cpp \
	LyricsLoader.h MenuInput.h NoteData.cpp NoteData.h \
	NoteDataUtil.cpp NoteDataUtil.h NoteDataWithScoring.cpp \
	NoteDataWithScoring.h NoteFieldPositioning.cpp \
	NoteFieldPositioning.h NoteTypes.cpp NoteTypes.h \
	NotesLoader.cpp NotesLoader.h NotesLoaderBMS.cpp \
	NotesLoaderBMS.h NotesLoaderDWI.cpp NotesLoaderDWI.h \
	NotesLoaderKSF.cpp NotesLoaderKSF.h NotesLoaderSM.cpp \
	NotesLoaderSM.h NotesWriterDWI.cpp NotesWriterDWI.h \
	NotesWriterSM.cpp NotesWriterSM.h OptionRowHandler.cpp \
	OptionRowHandler.h PlayerAI.cpp PlayerAI.h PlayerNumber.cpp \
	PlayerNumber.h PlayerOptions.cpp PlayerOptions.h \
	PlayerStageStats.cpp PlayerStageStats.h PlayerState.cpp \
	PlayerState.h Preference.cpp Preference.h Profile.cpp \
	Profile.h RandomSample.cpp RandomSample.h RadarValues.cpp \
	RadarValues.h RoomWheel.cpp RoomWheel.h ScreenDimensions.cpp \
	ScoreKeeper.h ScoreKeeperMAX2.cpp ScoreKeeperMAX2.h \
	ScoreKeeperRave.cpp ScoreKeeperRave.h Song.cpp song.h \
	SongCacheIndex.cpp SongCacheIndex.h SongOptions.cpp \
	SongOptions.h SongUtil.cpp SongUtil.h StageStats.cpp \
	StageStats.h Steps.cpp Steps.h StepsUtil.cpp StepsUtil.h \
	Style.cpp Style.h StyleUtil.cpp StyleUtil.h \
	SubscriptionManager.h StyleInput.h TimingData.cpp TimingData.h \
	ThemeMetric.h Trail.cpp Trail.h TrailUtil.cpp TrailUtil.h \
	TitleSubstitution.cpp TitleSubstitution.h IniFile.cpp \
	IniFile.h MsdFile.cpp MsdFile.h XmlFile.cpp XmlFile.h \
	StdString.h StepMania.cpp StepMania.h global.cpp global.h \
	SDL_utils.cpp SDL_utils.h arch/LoadingWindow/LoadingWindow.h \
	arch/LoadingWindow/LoadingWindow_Null.h \
	arch/LoadingWindow/LoadingWindow_Gtk.cpp \
	arch/LoadingWindow/LoadingWindow_Gtk.h \
	arch/LoadingWindow/LoadingWindow_SDL.cpp \
	arch/LoadingWindow/LoadingWindow_SDL.h \
	arch/Sound/RageSoundDriver.h \
	arch/Sound/RageSoundDriver_Null.cpp \
	arch/Sound/RageSoundDriver_Null.h \
	arch/Sound/RageSoundDriver_Generic_Software.cpp \
	arch/Sound/RageSoundDriver_Generic_Software.h \
	arch/Sound/RageSoundDriver_OSS.cpp \
	arch/Sound/RageSoundDriver_OSS.h arch/Sound/ALSA9Dynamic.cpp \
	arch/Sound/ALSA9Dynamic.h arch/Sound/ALSA9Functions.h \
	arch/Sound/ALSA9Helpers.cpp arch/Sound/ALSA9Helpers.h \
	arch/Sound/RageSoundDriver_ALSA9.cpp \
	arch/Sound/RageSoundDriver_ALSA9.h \
	arch/Sound/RageSoundDriver_ALSA9_Software.cpp \
	arch/Sound/RageSoundDriver_ALSA9_Software.h \
	arch/ArchHooks/ArchHooks.cpp arch/ArchHooks/ArchHooks.h \
	arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h \
	arch/InputHandler/InputHandler.cpp \
	arch/InputHandler/InputHandler.h \
	arch/InputHandler/InputHandler_MonkeyKeyboard.cpp \
	arch/InputHandler/InputHandler_MonkeyKeyboard.h \
	arch/InputHandler/InputHandler_SDL.cpp \
	arch/InputHandler/InputHandler_SDL.h \
	arch/InputHandler/InputHandler_X11.cpp \
	arch/InputHandler/InputHandler_X11.h \
	arch/InputHandler/InputHandler_Linux_Joystick.h \
	arch/InputHandler/InputHandler_Linux_Joystick.cpp \
	arch/MovieTexture/MovieTexture.cpp \
	arch/MovieTexture/MovieTexture.h \
	arch/MovieTexture/MovieTexture_Null.cpp \
	arch/MovieTexture/MovieTexture_Null.h \
	arch/MovieTexture/MovieTexture_FFMpeg.cpp \
	arch/MovieTexture/MovieTexture_FFMpeg.h \
	arch/Lights/LightsDriver.h \
	arch/Lights/LightsDriver_SystemMessage.cpp \
	arch/Lights/LightsDriver_SystemMessage.h \
	arch/Lights/LightsDriver_LinuxWeedTech.cpp \
	arch/Lights/LightsDriver_LinuxWeedTech.h \
	arch/Lights/LightsDriver_LinuxParallel.cpp \
	arch/Lights/LightsDriver_LinuxParallel.h \
	arch/MemoryCard/MemoryCardDriver.cpp \
	arch/MemoryCard/MemoryCardDriver.h \
	arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp \
	arch/MemoryCard/MemoryCardDriverThreaded_Linux.h \
	arch/LowLevelWindow/LowLevelWindow.h \
	arch/LowLevelWindow/LowLevelWindow_SDL.cpp \
	arch/LowLevelWindow/LowLevelWindow_SDL.h \
	arch/LowLevelWindow/LowLevelWindow_X11.cpp \
	arch/LowLevelWindow/LowLevelWindow_X11.h \
	archutils/Unix/X11Helper.cpp archutils/Unix/X11Helper.h \
	archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	arch/Threads/Threads.h arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/arch.h arch/arch.cpp \
	arch/arch_default.h arch/arch_platform.h BGAnimation.cpp \
	BGAnimation.h BGAnimationLayer.cpp BGAnimationLayer.h \
	Banner.cpp Banner.h DifficultyIcon.cpp DifficultyIcon.h \
	MeterDisplay.cpp MeterDisplay.h StreamDisplay.cpp \
	StreamDisplay.h Transition.cpp Transition.h \
	ActiveAttackList.cpp ActiveAttackList.h BPMDisplay.cpp \
	BPMDisplay.h ComboGraph.cpp ComboGraph.h \
	CourseContentsList.cpp CourseContentsList.h \
	CourseEntryDisplay.cpp CourseEntryDisplay.h \
	DifficultyDisplay.cpp DifficultyDisplay.h DifficultyList.cpp \
	DifficultyList.h DifficultyMeter.cpp DifficultyMeter.h \
	DifficultyRating.cpp DifficultyRating.h DualScrollBar.cpp \
	DualScrollBar.h EditCoursesMenu.cpp EditCoursesMenu.h \
	EditMenu.cpp EditMenu.h FadingBanner.cpp FadingBanner.h \
	GradeDisplay.cpp GradeDisplay.h GraphDisplay.cpp \
	GraphDisplay.h GrooveGraph.cpp GrooveGraph.h GrooveRadar.cpp \
	GrooveRadar.h GroupList.cpp GroupList.h HelpDisplay.cpp \
	HelpDisplay.h MemoryCardDisplay.cpp MemoryCardDisplay.h \
	MenuTimer.cpp MenuTimer.h ModeSwitcher.cpp ModeSwitcher.h \
	MusicBannerWheel.cpp MusicBannerWheel.h MusicList.cpp \
	MusicList.h MusicSortDisplay.cpp MusicSortDisplay.h \
	MusicWheel.cpp MusicWheel.h MusicWheelItem.cpp \
	MusicWheelItem.h OptionIcon.cpp OptionIcon.h OptionIconRow.cpp \
	OptionIconRow.h OptionRow.cpp OptionRow.h OptionsCursor.cpp \
	OptionsCursor.h PaneDisplay.cpp PaneDisplay.h ScrollBar.cpp \
	ScrollBar.h ScrollingList.cpp ScrollingList.h SnapDisplay.cpp \
	SnapDisplay.h TextBanner.cpp TextBanner.h WheelBase.cpp \
	WheelBase.h WheelItemBase.cpp WheelItemBase.h \
	WheelNotifyIcon.cpp WheelNotifyIcon.h ArrowEffects.cpp \
	ArrowEffects.h AttackDisplay.cpp AttackDisplay.h \
	Background.cpp Background.h BeginnerHelper.cpp \
	BeginnerHelper.h CombinedLifeMeterTug.cpp \
	CombinedLifeMeterTug.h Combo.cpp Combo.h DancingCharacters.cpp \
	DancingCharacters.h Foreground.cpp Foreground.h GhostArrow.cpp \
	GhostArrow.h GhostArrowRow.cpp GhostArrowRow.h \
	HoldGhostArrow.cpp HoldGhostArrow.h HoldJudgment.cpp \
	HoldJudgment.h Judgment.cpp Judgment.h LifeMeter.h \
	LifeMeterBar.cpp LifeMeterBar.h LifeMeterBattery.cpp \
	LifeMeterBattery.h LifeMeterTime.cpp LifeMeterTime.h \
	LyricDisplay.cpp LyricDisplay.h NoteDisplay.cpp NoteDisplay.h \
	NoteField.cpp NoteField.h PercentageDisplay.cpp \
	PercentageDisplay.h Player.cpp Player.h ReceptorArrow.cpp \
	ReceptorArrow.h ReceptorArrowRow.cpp ReceptorArrowRow.h \
	ScoreDisplay.cpp ScoreDisplay.h ScoreDisplayBattle.cpp \
	ScoreDisplayBattle.h ScoreDisplayCalories.cpp \
	ScoreDisplayCalories.h ScoreDisplayLifeTime.cpp \
	ScoreDisplayLifeTime.h ScoreDisplayNormal.cpp \
	ScoreDisplayNormal.h ScoreDisplayOni.cpp ScoreDisplayOni.h \
	ScoreDisplayPercentage.cpp ScoreDisplayPercentage.h \
	ScoreDisplayRave.cpp ScoreDisplayRave.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h RageSoundReader_WAV.cpp \
	RageSoundReader_WAV.h RageSoundReader_Vorbisfile.cpp \
	RageSoundReader_Vorbisfile.h RageSoundReader_MP3.cpp \
	RageSoundReader_MP3.h RageBitmapTexture.cpp \
	RageBitmapTexture.h RageDisplay.cpp RageDisplay.h \
	RageDisplay_OGL.cpp RageDisplay_OGL.h \
	RageDisplay_OGL_Extensions.cpp RageDisplay_OGL_Extensions.h \
	RageDisplay_Null.cpp RageDisplay_Null.h RageException.cpp \
	RageException.h RageInput.cpp RageInput.h RageInputDevice.cpp \
	RageInputDevice.h RageLog.cpp RageLog.h RageMath.cpp \
	RageMath.h RageModelGeometry.cpp RageModelGeometry.h \
	RageSound.cpp RageSound.h RageSoundManager.cpp \
	RageSoundManager.h RageSoundUtil.cpp RageSoundUtil.h \
	RageSoundMixBuffer.cpp RageSoundMixBuffer.h \
	RageSoundPosMap.cpp RageSoundPosMap.h RageSoundReader.h \
	RageSoundReader_FileReader.cpp RageSoundReader_FileReader.h \
	RageSoundReader_Preload.cpp RageSoundReader_Preload.h \
	RageSoundReader_Resample.cpp RageSoundReader_Resample.h \
	RageSoundReader_Resample_Fast.cpp \
	RageSoundReader_Resample_Fast.h \
	RageSoundReader_Resample_Good.cpp \
	RageSoundReader_Resample_Good.h RageSoundReader_Chain.cpp \
	RageSoundReader_Chain.h RageSoundResampler.cpp \
	RageSoundResampler.h RageSurface.cpp RageSurface.h \
	RageSurfaceUtils.cpp RageSurfaceUtils.h \
	RageSurfaceUtils_Dither.cpp RageSurfaceUtils_Dither.h \
	RageSurface_Save_JPEG.cpp RageSurface_Save_JPEG.h \
	RageSurfaceUtils_Palettize.cpp RageSurfaceUtils_Palettize.h \
	RageSurfaceUtils_Zoom.cpp RageSurfaceUtils_Zoom.h \
	RageSurface_Load.cpp RageSurface_Load.h \
	RageSurface_Load_PNG.cpp RageSurface_Load_PNG.h \
	RageSurface_Load_JPEG.cpp RageSurface_Load_JPEG.h \
	RageSurface_Load_GIF.cpp RageSurface_Load_GIF.h \
	RageSurface_Load_BMP.cpp RageSurface_Load_BMP.h \
	RageSurface_Load_XPM.cpp RageSurface_Load_XPM.h \
	RageTexture.cpp RageTexture.h RageSurface_Save_BMP.cpp \
	RageSurface_Save_BMP.h RageTextureID.cpp RageTextureID.h \
	RageTextureManager.cpp RageTextureManager.h RageThreads.cpp \
	RageThreads.h RageTimer.cpp RageTimer.h RageTypes.h \
	RageUtil.cpp RageUtil.h RageUtil_CharConversions.cpp \
	RageUtil_CharConversions.h RageUtil_BackgroundLoader.cpp \
	RageUtil_BackgroundLoader.h RageUtil_FileDB.cpp \
	RageUtil_FileDB.h RageUtil_CircularBuffer.h RageUtil_AutoPtr.h \
	RageUtil_WorkerThread.cpp RageUtil_WorkerThread.h Actor.cpp \
	Actor.h ActorCollision.h ActorFrame.cpp ActorFrame.h \
	ActorScroller.cpp ActorScroller.h ActorUtil.cpp ActorUtil.h \
	AutoActor.cpp AutoActor.h BitmapText.cpp BitmapText.h \
	Model.cpp Model.h ModelManager.cpp ModelManager.h \
	ModelTypes.cpp ModelTypes.h Quad.cpp Quad.h RollingNumbers.cpp \
	RollingNumbers.h Sprite.cpp Sprite.h AnnouncerManager.cpp \
	AnnouncerManager.h Bookkeeper.cpp Bookkeeper.h \
	CryptManager.cpp CryptManager.h FontManager.cpp FontManager.h \
	GameSoundManager.cpp GameSoundManager.h GameManager.cpp \
	GameManager.h GameState.cpp GameState.h InputFilter.cpp \
	InputFilter.h InputMapper.cpp InputMapper.h InputQueue.cpp \
	InputQueue.h LuaManager.cpp LuaManager.h LightsManager.cpp \
	LightsManager.h MemoryCardManager.cpp MemoryCardManager.h \
	MessageManager.cpp MessageManager.h NetworkSyncManager.cpp \
	NetworkSyncManager.h NetworkSyncServer.cpp NetworkSyncServer.h \
	NoteSkinManager.cpp NoteSkinManager.h PrefsManager.cpp \
	PrefsManager.h ProfileManager.cpp ProfileManager.h \
	ScreenManager.cpp ScreenManager.h SongManager.cpp \
	SongManager.h StatsManager.cpp StatsManager.h ThemeManager.cpp \
	ThemeManager.h UnlockManager.cpp UnlockManager.h ezsockets.cpp \
	ezsockets.h crypto/CryptBn.cpp crypto/CryptBn.h \
	crypto/CryptMD5.cpp crypto/CryptMD5.h crypto/CryptNoise.cpp \
	crypto/CryptPrime.cpp crypto/CryptPrime.h crypto/CryptRSA.cpp \
	crypto/CryptRSA.h crypto/CryptRand.cpp crypto/CryptRand.h \
	crypto/CryptSH512.cpp crypto/CryptSH512.h crypto/CryptSHA.cpp \
	crypto/CryptSHA.h crypto51/algebra.cpp crypto51/algebra.h \
	crypto51/algparam.cpp crypto51/algparam.h crypto51/argnames.h \
	crypto51/asn.cpp crypto51/asn.h crypto51/config.h \
	crypto51/cryptlib.cpp crypto51/cryptlib.h crypto51/files.cpp \
	crypto51/files.h crypto51/filters.cpp crypto51/filters.h \
	crypto51/fltrimpl.h crypto51/integer.cpp crypto51/integer.h \
	crypto51/iterhash.cpp crypto51/iterhash.h crypto51/misc.cpp \
	crypto51/misc.h crypto51/modarith.h crypto51/mqueue.cpp \
	crypto51/mqueue.h crypto51/nbtheory.cpp crypto51/nbtheory.h \
	crypto51/oids.h crypto51/osrng.cpp crypto51/osrng.h \
	crypto51/pch.h crypto51/pkcspad.cpp crypto51/pkcspad.h \
	crypto51/pubkey.cpp crypto51/pubkey.h crypto51/queue.cpp \
	crypto51/queue.h crypto51/rsa.cpp crypto51/rsa.h \
	crypto51/secblock.h crypto51/seckey.h crypto51/sha.cpp \
	crypto51/sha.h crypto51/simple.h crypto51/smartptr.h \
	crypto51/words.h CryptHelpers.cpp CryptHelpers.h
am__objects_1 =  \
	ScreenGameplayMultiplayer.$(OBJEXT) \
	ScreenSMOnlineLogin.$(OBJEXT)
am__objects_2 = Screen.$(OBJEXT) ScreenAttract.$(OBJEXT) \
	ScreenBookkeeping.$(OBJEXT) ScreenBranch.$(OBJEXT) \
	ScreenCenterImage.$(OBJEXT) ScreenCredits.$(OBJEXT) \
	ScreenDebugOverlay.$(OBJEXT) ScreenDemonstration.$(OBJEXT) \
	ScreenEdit.$(OBJEXT) ScreenEditCoursesMenu.$(OBJEXT) \
	EditCoursesSongMenu.$(OBJEXT) ScreenEditMenu.$(OBJEXT) \
	ScreenEnding.$(OBJEXT) ScreenEndlessBreak.$(OBJEXT) \
	ScreenEvaluation.$(OBJEXT) ScreenExit.$(OBJEXT) \
	ScreenNetEvaluation.$(OBJEXT) ScreenNetSelectMusic.$(OBJEXT) \
	ScreenNetSelectBase.$(OBJEXT) ScreenNetRoom.$(OBJEXT) \
	ScreenEz2SelectMusic.$(OBJEXT) ScreenEz2SelectPlayer.$(OBJEXT) \
	ScreenGameplay.$(OBJEXT) ScreenHowToPlay.$(OBJEXT) \
	ScreenInstructions.$(OBJEXT) ScreenJukebox.$(OBJEXT) \
	ScreenLogo.$(OBJEXT) ScreenMapControllers.$(OBJEXT) \
	ScreenMessage.$(OBJEXT) ScreenMiniMenu.$(OBJEXT) \
	ScreenMusicScroll.$(OBJEXT) ScreenNameEntry.$(OBJEXT) \
	ScreenNameEntryTraditional.$(OBJEXT) ScreenOptions.$(OBJEXT) \
	ScreenOptionsMaster.$(OBJEXT) \
	ScreenOptionsMasterPrefs.$(OBJEXT) ScreenPackages.$(OBJEXT) \
	ScreenPlayerOptions.$(OBJEXT) ScreenNetworkOptions.$(OBJEXT) \
	ScreenProfileOptions.$(OBJEXT) ScreenPrompt.$(OBJEXT) \
	ScreenRanking.$(OBJEXT) ScreenReloadSongs.$(OBJEXT) \
	ScreenSandbox.$(OBJEXT) ScreenSaveSync.$(OBJEXT) \
	ScreenSelect.$(OBJEXT) ScreenSelectCharacter.$(OBJEXT) \
	ScreenSelectDifficulty.$(OBJEXT) ScreenSelectGroup.$(OBJEXT) \
	ScreenSelectMaster.$(OBJEXT) ScreenSelectMode.$(OBJEXT) \
	ScreenSelectMusic.$(OBJEXT) ScreenSelectStyle.$(OBJEXT) \
	ScreenSyncOverlay.$(OBJEXT) ScreenSystemLayer.$(OBJEXT) \
	ScreenSetTime.$(OBJEXT) ScreenSongOptions.$(OBJEXT) \
	ScreenSplash.$(OBJEXT) ScreenStage.$(OBJEXT) \
	ScreenTest.$(OBJEXT) ScreenTestFonts.$(OBJEXT) \
	ScreenTestInput.$(OBJEXT) ScreenTestLights.$(OBJEXT) \
	ScreenTestSound.$(OBJEXT) ScreenTextEntry.$(OBJEXT) \
	ScreenTitleMenu.$(OBJEXT) ScreenUnlock.$(OBJEXT) \
	ScreenWithMenuElements.$(OBJEXT) $(am__objects_1)
am__objects_3 = ActorCommands.$(OBJEXT) Attack.$(OBJEXT) \
	AutoKeysounds.$(OBJEXT) BackgroundUtil.$(OBJEXT) \
	BannerCache.$(OBJEXT) CatalogXml.$(OBJEXT) Character.$(OBJEXT) \
	CodeDetector.$(OBJEXT) Command.$(OBJEXT) \
	CommonMetrics.$(OBJEXT) Difficulty.$(OBJEXT) \
	EnumHelper.$(OBJEXT) Course.$(OBJEXT) CourseUtil.$(OBJEXT) \
	DateTime.$(OBJEXT) Font.$(OBJEXT) FontCharAliases.$(OBJEXT) \
	FontCharmaps.$(OBJEXT) Game.$(OBJEXT) GameCommand.$(OBJEXT) \
	GameConstantsAndTypes.$(OBJEXT) GameInput.$(OBJEXT) \
	Grade.$(OBJEXT) HighScore.$(OBJEXT) Inventory.$(OBJEXT) \
	LuaReference.$(OBJEXT) LyricsLoader.$(OBJEXT) \
	NoteData.$(OBJEXT) NoteDataUtil.$(OBJEXT) \
	NoteDataWithScoring.$(OBJEXT) NoteFieldPositioning.$(OBJEXT) \
	NoteTypes.$(OBJEXT) NotesLoader.$(OBJEXT) \
	NotesLoaderBMS.$(OBJEXT) NotesLoaderDWI.$(OBJEXT) \
	NotesLoaderKSF.$(OBJEXT) NotesLoaderSM.$(OBJEXT) \
	NotesWriterDWI.$(OBJEXT) NotesWriterSM.$(OBJEXT) \
	OptionRowHandler.$(OBJEXT) PlayerAI.$(OBJEXT) \
	PlayerNumber.$(OBJEXT) PlayerOptions.$(OBJEXT) \
	PlayerStageStats.$(OBJEXT) PlayerState.$(OBJEXT) \
	Preference.$(OBJEXT) Profile.$(OBJEXT) RandomSample.$(OBJEXT) \
	RadarValues.$(OBJEXT) RoomWheel.$(OBJEXT) \
	ScreenDimensions.$(OBJEXT) ScoreKeeperMAX2.$(OBJEXT) \
	ScoreKeeperRave.$(OBJEXT) Song.$(OBJEXT) \
	SongCacheIndex.$(OBJEXT) SongOptions.$(OBJEXT) \
	SongUtil.$(OBJEXT) StageStats.$(OBJEXT) Steps.$(OBJEXT) \
	StepsUtil.$(OBJEXT) Style.$(OBJEXT) StyleUtil.$(OBJEXT) \
	TimingData.$(OBJEXT) Trail.$(OBJEXT) TrailUtil.$(OBJEXT) \
	TitleSubstitution.$(OBJEXT)
am__objects_4 = IniFile.$(OBJEXT) MsdFile.$(OBJEXT) XmlFile.$(OBJEXT)
#am__objects_5 = SDL_utils.$(OBJEXT)
am__objects_6 = StepMania.$(OBJEXT) global.$(OBJEXT) $(am__objects_5)
am__objects_7 = LoadingWindow_Gtk.$(OBJEXT)
#am__objects_8 = LoadingWindow_SDL.$(OBJEXT)
am__objects_9 = $(am__objects_7) $(am__objects_8)
am__objects_10 = RageSoundDriver_OSS.$(OBJEXT)
am__objects_11 = ALSA9Dynamic.$(OBJEXT) \
	ALSA9Helpers.$(OBJEXT) \
	RageSoundDriver_ALSA9.$(OBJEXT) \
	RageSoundDriver_ALSA9_Software.$(OBJEXT)
am__objects_12 = RageSoundDriver_Null.$(OBJEXT) \
	RageSoundDriver_Generic_Software.$(OBJEXT) $(am__objects_10) \
	$(am__objects_11)
am__objects_13 = ArchHooks_Unix.$(OBJEXT)
am__objects_14 = ArchHooks.$(OBJEXT) $(am__objects_13)
##am__objects_15 =  \
##	InputHandler_SDL.$(OBJEXT)
am__objects_16 = InputHandler_X11.$(OBJEXT)
am__objects_17 = InputHandler_Linux_Joystick.$(OBJEXT)
am__objects_18 = InputHandler.$(OBJEXT) \
	InputHandler_MonkeyKeyboard.$(OBJEXT) $(am__objects_15) \
	$(am__objects_16) $(am__objects_17)
#am__objects_19 = MovieTexture_FFMpeg.$(OBJEXT)
am__objects_20 = MovieTexture.$(OBJEXT) MovieTexture_Null.$(OBJEXT) \
	$(am__objects_19)
am__objects_21 = LightsDriver_LinuxWeedTech.$(OBJEXT) \
	LightsDriver_LinuxParallel.$(OBJEXT)
am__objects_22 = LightsDriver_SystemMessage.$(OBJEXT) \
	$(am__objects_21)
am__objects_23 = MemoryCardDriverThreaded_Linux.$(OBJEXT)
am__objects_24 = MemoryCardDriver.$(OBJEXT) $(am__objects_23)
##am__objects_25 =  \
##	LowLevelWindow_SDL.$(OBJEXT)
am__objects_26 = LowLevelWindow_X11.$(OBJEXT) \
	X11Helper.$(OBJEXT)
am__objects_27 = $(am__objects_25) $(am__objects_26)
am__objects_28 = AssertionHandler.$(OBJEXT) \
	GetSysInfo.$(OBJEXT) SignalHandler.$(OBJEXT) \
	LinuxThreadHelpers.$(OBJEXT) \
	RunningUnderValgrind.$(OBJEXT) \
	EmergencyShutdown.$(OBJEXT)
am__objects_29 =  \
	Backtrace.$(OBJEXT) \
	BacktraceNames.$(OBJEXT) \
	CrashHandler.$(OBJEXT) \
	CrashHandlerChild.$(OBJEXT)
am__objects_30 = $(am__objects_28) $(am__objects_29)
am__objects_31 = Dialog.$(OBJEXT)
am__objects_32 = Threads_Pthreads.$(OBJEXT)
am__objects_33 = $(am__objects_32)
am__objects_34 = $(am__objects_9) $(am__objects_12) $(am__objects_14) \
	$(am__objects_18) $(am__objects_20) $(am__objects_22) \
	$(am__objects_24) $(am__objects_27) $(am__objects_30) \
	$(am__objects_31) $(am__objects_33) arch.$(OBJEXT)
am__objects_35 = BGAnimation.$(OBJEXT) BGAnimationLayer.$(OBJEXT) \
	Banner.$(OBJEXT) DifficultyIcon.$(OBJEXT) \
	MeterDisplay.$(OBJEXT) StreamDisplay.$(OBJEXT) \
	Transition.$(OBJEXT)
am__objects_36 = ActiveAttackList.$(OBJEXT) BPMDisplay.$(OBJEXT) \
	ComboGraph.$(OBJEXT) CourseContentsList.$(OBJEXT) \
	CourseEntryDisplay.$(OBJEXT) DifficultyDisplay.$(OBJEXT) \
	DifficultyList.$(OBJEXT) DifficultyMeter.$(OBJEXT) \
	DifficultyRating.$(OBJEXT) DualScrollBar.$(OBJEXT) \
	EditCoursesMenu.$(OBJEXT) EditMenu.$(OBJEXT) \
	FadingBanner.$(OBJEXT) GradeDisplay.$(OBJEXT) \
	GraphDisplay.$(OBJEXT) GrooveGraph.$(OBJEXT) \
	GrooveRadar.$(OBJEXT) GroupList.$(OBJEXT) \
	HelpDisplay.$(OBJEXT) MemoryCardDisplay.$(OBJEXT) \
	MenuTimer.$(OBJEXT) ModeSwitcher.$(OBJEXT) \
	MusicBannerWheel.$(OBJEXT) MusicList.$(OBJEXT) \
	MusicSortDisplay.$(OBJEXT) MusicWheel.$(OBJEXT) \
	MusicWheelItem.$(OBJEXT) OptionIcon.$(OBJEXT) \
	OptionIconRow.$(OBJEXT) OptionRow.$(OBJEXT) \
	OptionsCursor.$(OBJEXT) PaneDisplay.$(OBJEXT) \
	ScrollBar.$(OBJEXT) ScrollingList.$(OBJEXT) \
	SnapDisplay.$(OBJEXT) TextBanner.$(OBJEXT) WheelBase.$(OBJEXT) \
	WheelItemBase.$(OBJEXT) WheelNotifyIcon.$(OBJEXT)
am__objects_37 = ArrowEffects.$(OBJEXT) AttackDisplay.$(OBJEXT) \
	Background.$(OBJEXT) BeginnerHelper.$(OBJEXT) \
	CombinedLifeMeterTug.$(OBJEXT) Combo.$(OBJEXT) \
	DancingCharacters.$(OBJEXT) Foreground.$(OBJEXT) \
	GhostArrow.$(OBJEXT) GhostArrowRow.$(OBJEXT) \
	HoldGhostArrow.$(OBJEXT) HoldJudgment.$(OBJEXT) \
	Judgment.$(OBJEXT) LifeMeterBar.$(OBJEXT) \
	LifeMeterBattery.$(OBJEXT) LifeMeterTime.$(OBJEXT) \
	LyricDisplay.$(OBJEXT) NoteDisplay.$(OBJEXT) \
	NoteField.$(OBJEXT) PercentageDisplay.$(OBJEXT) \
	Player.$(OBJEXT) ReceptorArrow.$(OBJEXT) \
	ReceptorArrowRow.$(OBJEXT) ScoreDisplay.$(OBJEXT) \
	ScoreDisplayBattle.$(OBJEXT) ScoreDisplayCalories.$(OBJEXT) \
	ScoreDisplayLifeTime.$(OBJEXT) ScoreDisplayNormal.$(OBJEXT) \
	ScoreDisplayOni.$(OBJEXT) ScoreDisplayPercentage.$(OBJEXT) \
	ScoreDisplayRave.$(OBJEXT)
am__objects_38 = chartables.$(OBJEXT) get.$(OBJEXT) \
	maketables.$(OBJEXT) pcre.$(OBJEXT) study.$(OBJEXT)
am__objects_39 = RageFileBasic.$(OBJEXT) RageFile.$(OBJEXT) \
	RageFileDriver.$(OBJEXT) RageFileManager.$(OBJEXT) \
	RageFileDriverDirect.$(OBJEXT) \
	RageFileDriverDirectHelpers.$(OBJEXT) \
	RageFileDriverMemory.$(OBJEXT) RageFileDriverZip.$(OBJEXT) \
	RageFileDriverDeflate.$(OBJEXT) RageFileDriverSlice.$(OBJEXT) \
	RageFileDriverTimeout.$(OBJEXT)
am__objects_40 =  \
	RageSoundReader_Vorbisfile.$(OBJEXT)
am__objects_41 = RageSoundReader_MP3.$(OBJEXT)
am__objects_42 = RageSoundReader_WAV.$(OBJEXT) $(am__objects_40) \
	$(am__objects_41)
am__objects_43 = $(am__objects_38) $(am__objects_39) $(am__objects_42) \
	RageBitmapTexture.$(OBJEXT) RageDisplay.$(OBJEXT) \
	RageDisplay_OGL.$(OBJEXT) RageDisplay_OGL_Extensions.$(OBJEXT) \
	RageDisplay_Null.$(OBJEXT) RageException.$(OBJEXT) \
	RageInput.$(OBJEXT) RageInputDevice.$(OBJEXT) \
	RageLog.$(OBJEXT) RageMath.$(OBJEXT) \
	RageModelGeometry.$(OBJEXT) RageSound.$(OBJEXT) \
	RageSoundManager.$(OBJEXT) RageSoundUtil.$(OBJEXT) \
	RageSoundMixBuffer.$(OBJEXT) RageSoundPosMap.$(OBJEXT) \
	RageSoundReader_FileReader.$(OBJEXT) \
	RageSoundReader_Preload.$(OBJEXT) \
	RageSoundReader_Resample.$(OBJEXT) \
	RageSoundReader_Resample_Fast.$(OBJEXT) \
	RageSoundReader_Resample_Good.$(OBJEXT) \
	RageSoundReader_Chain.$(OBJEXT) RageSoundResampler.$(OBJEXT) \
	RageSurface.$(OBJEXT) RageSurfaceUtils.$(OBJEXT) \
	RageSurfaceUtils_Dither.$(OBJEXT) \
	RageSurface_Save_JPEG.$(OBJEXT) \
	RageSurfaceUtils_Palettize.$(OBJEXT) \
	RageSurfaceUtils_Zoom.$(OBJEXT) RageSurface_Load.$(OBJEXT) \
	RageSurface_Load_PNG.$(OBJEXT) RageSurface_Load_JPEG.$(OBJEXT) \
	RageSurface_Load_GIF.$(OBJEXT) RageSurface_Load_BMP.$(OBJEXT) \
	RageSurface_Load_XPM.$(OBJEXT) RageTexture.$(OBJEXT) \
	RageSurface_Save_BMP.$(OBJEXT) RageTextureID.$(OBJEXT) \
	RageTextureManager.$(OBJEXT) RageThreads.$(OBJEXT) \
	RageTimer.$(OBJEXT) RageUtil.$(OBJEXT) \
	RageUtil_CharConversions.$(OBJEXT) \
	RageUtil_BackgroundLoader.$(OBJEXT) RageUtil_FileDB.$(OBJEXT) \
	RageUtil_WorkerThread.$(OBJEXT)
am__objects_44 = Actor.$(OBJEXT) ActorFrame.$(OBJEXT) \
	ActorScroller.$(OBJEXT) ActorUtil.$(OBJEXT) \
	AutoActor.$(OBJEXT) BitmapText.$(OBJEXT) Model.$(OBJEXT) \
	ModelManager.$(OBJEXT) ModelTypes.$(OBJEXT) Quad.$(OBJEXT) \
	RollingNumbers.$(OBJEXT) Sprite.$(OBJEXT)
am__objects_45 = ezsockets.$(OBJEXT)
am__objects_46 = AnnouncerManager.$(OBJEXT) Bookkeeper.$(OBJEXT) \
	CryptManager.$(OBJEXT) FontManager.$(OBJEXT) \
	GameSoundManager.$(OBJEXT) GameManager.$(OBJEXT) \
	GameState.$(OBJEXT) InputFilter.$(OBJEXT) \
	InputMapper.$(OBJEXT) InputQueue.$(OBJEXT) \
	LuaManager.$(OBJEXT) LightsManager.$(OBJEXT) \
	MemoryCardManager.$(OBJEXT) MessageManager.$(OBJEXT) \
	NetworkSyncManager.$(OBJEXT) NetworkSyncServer.$(OBJEXT) \
	NoteSkinManager.$(OBJEXT) PrefsManager.$(OBJEXT) \
	ProfileManager.$(OBJEXT) ScreenManager.$(OBJEXT) \
	SongManager.$(OBJEXT) StatsManager.$(OBJEXT) \
	ThemeManager.$(OBJEXT) UnlockManager.$(OBJEXT) \
	$(am__objects_45)
am__objects_47 = CryptBn.$(OBJEXT) CryptMD5.$(OBJEXT) \
	CryptNoise.$(OBJEXT) CryptPrime.$(OBJEXT) CryptRSA.$(OBJEXT) \
	CryptRand.$(OBJEXT) CryptSH512.$(OBJEXT) CryptSHA.$(OBJEXT)
am__objects_48 = algebra.$(OBJEXT) algparam.$(OBJEXT) asn.$(OBJEXT) \
	cryptlib.$(OBJEXT) files.$(OBJEXT) filters.$(OBJEXT) \
	integer.$(OBJEXT) iterhash.$(OBJEXT) misc.$(OBJEXT) \
	mqueue.$(OBJEXT) nbtheory.$(OBJEXT) osrng.$(OBJEXT) \
	pkcspad.$(OBJEXT) pubkey.$(OBJEXT) queue.$(OBJEXT) \
	rsa.$(OBJEXT) sha.$(OBJEXT) CryptHelpers.$(OBJEXT)
am__objects_49 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \
	$(am__objects_6) $(am__objects_34) $(am__objects_35) \
	$(am__objects_36) $(am__objects_37) $(am__objects_43) \
	$(am__objects_44) $(am__objects_46) $(am__objects_47) \
	$(am__objects_48)
am_stepmania_OBJECTS = $(am__objects_49)
stepmania_OBJECTS = $(am_stepmania_OBJECTS)
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(srcdir)/libresample/libresample.a
stepmania_DEPENDENCIES = $(am__DEPENDENCIES_2)
am__test_audio_readers_SOURCES_DIST = RageSoundReader_WAV.cpp \
	RageSoundReader_WAV.h RageSoundReader_Vorbisfile.cpp \
	RageSoundReader_Vorbisfile.h RageSoundReader_MP3.cpp \
	RageSoundReader_MP3.h archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h arch/ArchHooks/ArchHooks.cpp \
	arch/ArchHooks/ArchHooks.h arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h arch/Threads/Threads.h \
	arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	tests/test_misc.cpp tests/test_misc.h IniFile.cpp IniFile.h \
	XmlFile.cpp XmlFile.h DateTime.cpp DateTime.h PrefsManager.cpp \
	PrefsManager.h Preference.cpp Preference.h LuaFunctions.h \
	LuaHelpers.cpp LuaHelpers.h RageException.cpp RageLog.cpp \
	RageThreads.cpp RageTimer.cpp RageTimer.h RageUtil.cpp \
	RageUtil_FileDB.cpp RageUtil_FileDB.h global.cpp global.h \
	tests/test_audio_readers.cpp RageSoundUtil.cpp RageSoundUtil.h \
	RageSoundMixBuffer.cpp RageSoundMixBuffer.h \
	RageSoundReader_FileReader.cpp RageSoundReader_FileReader.h \
	RageSoundReader_Preload.cpp RageSoundReader_Preload.h \
	RageSoundReader_Resample.cpp RageSoundReader_Resample.h \
	RageSoundReader_Resample_Fast.cpp \
	RageSoundReader_Resample_Fast.h \
	RageSoundReader_Resample_Good.cpp \
	RageSoundReader_Resample_Good.h RageSoundReader_Chain.cpp \
	RageSoundReader_Chain.h RageSoundResampler.cpp \
	RageSoundResampler.h
am__objects_50 = $(am__objects_30) $(am__objects_38) $(am__objects_39) \
	$(am__objects_14) $(am__objects_33) $(am__objects_31) \
	test_misc.$(OBJEXT) IniFile.$(OBJEXT) XmlFile.$(OBJEXT) \
	DateTime.$(OBJEXT) PrefsManager.$(OBJEXT) Preference.$(OBJEXT) \
	LuaHelpers.$(OBJEXT) RageException.$(OBJEXT) RageLog.$(OBJEXT) \
	RageThreads.$(OBJEXT) RageTimer.$(OBJEXT) RageUtil.$(OBJEXT) \
	RageUtil_FileDB.$(OBJEXT) global.$(OBJEXT)
am_test_audio_readers_OBJECTS = $(am__objects_42) $(am__objects_50) \
	test_audio_readers.$(OBJEXT) RageSoundUtil.$(OBJEXT) \
	RageSoundMixBuffer.$(OBJEXT) \
	RageSoundReader_FileReader.$(OBJEXT) \
	RageSoundReader_Preload.$(OBJEXT) \
	RageSoundReader_Resample.$(OBJEXT) \
	RageSoundReader_Resample_Fast.$(OBJEXT) \
	RageSoundReader_Resample_Good.$(OBJEXT) \
	RageSoundReader_Chain.$(OBJEXT) RageSoundResampler.$(OBJEXT)
test_audio_readers_OBJECTS = $(am_test_audio_readers_OBJECTS)
test_audio_readers_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(srcdir)/libresample/libresample.a
am__test_file_errors_SOURCES_DIST =  \
	archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h arch/ArchHooks/ArchHooks.cpp \
	arch/ArchHooks/ArchHooks.h arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h arch/Threads/Threads.h \
	arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	tests/test_misc.cpp tests/test_misc.h IniFile.cpp IniFile.h \
	XmlFile.cpp XmlFile.h DateTime.cpp DateTime.h PrefsManager.cpp \
	PrefsManager.h Preference.cpp Preference.h LuaFunctions.h \
	LuaHelpers.cpp LuaHelpers.h RageException.cpp RageLog.cpp \
	RageThreads.cpp RageTimer.cpp RageTimer.h RageUtil.cpp \
	RageUtil_FileDB.cpp RageUtil_FileDB.h global.cpp global.h \
	tests/test_file_errors.cpp MsdFile.cpp MsdFile.h \
	CryptManager.cpp CryptManager.h crypto51/algebra.cpp \
	crypto51/algebra.h crypto51/algparam.cpp crypto51/algparam.h \
	crypto51/argnames.h crypto51/asn.cpp crypto51/asn.h \
	crypto51/config.h crypto51/cryptlib.cpp crypto51/cryptlib.h \
	crypto51/files.cpp crypto51/files.h crypto51/filters.cpp \
	crypto51/filters.h crypto51/fltrimpl.h crypto51/integer.cpp \
	crypto51/integer.h crypto51/iterhash.cpp crypto51/iterhash.h \
	crypto51/misc.cpp crypto51/misc.h crypto51/modarith.h \
	crypto51/mqueue.cpp crypto51/mqueue.h crypto51/nbtheory.cpp \
	crypto51/nbtheory.h crypto51/oids.h crypto51/osrng.cpp \
	crypto51/osrng.h crypto51/pch.h crypto51/pkcspad.cpp \
	crypto51/pkcspad.h crypto51/pubkey.cpp crypto51/pubkey.h \
	crypto51/queue.cpp crypto51/queue.h crypto51/rsa.cpp \
	crypto51/rsa.h crypto51/secblock.h crypto51/seckey.h \
	crypto51/sha.cpp crypto51/sha.h crypto51/simple.h \
	crypto51/smartptr.h crypto51/words.h CryptHelpers.cpp \
	CryptHelpers.h crypto/CryptBn.cpp crypto/CryptBn.h \
	crypto/CryptMD5.cpp crypto/CryptMD5.h crypto/CryptNoise.cpp \
	crypto/CryptPrime.cpp crypto/CryptPrime.h crypto/CryptRSA.cpp \
	crypto/CryptRSA.h crypto/CryptRand.cpp crypto/CryptRand.h \
	crypto/CryptSH512.cpp crypto/CryptSH512.h crypto/CryptSHA.cpp \
	crypto/CryptSHA.h
am_test_file_errors_OBJECTS = $(am__objects_50) \
	test_file_errors.$(OBJEXT) MsdFile.$(OBJEXT) XmlFile.$(OBJEXT) \
	CryptManager.$(OBJEXT) $(am__objects_48) $(am__objects_47)
test_file_errors_OBJECTS = $(am_test_file_errors_OBJECTS)
test_file_errors_LDADD = $(LDADD)
am__test_file_readers_SOURCES_DIST =  \
	archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h arch/ArchHooks/ArchHooks.cpp \
	arch/ArchHooks/ArchHooks.h arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h arch/Threads/Threads.h \
	arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	tests/test_misc.cpp tests/test_misc.h IniFile.cpp IniFile.h \
	XmlFile.cpp XmlFile.h DateTime.cpp DateTime.h PrefsManager.cpp \
	PrefsManager.h Preference.cpp Preference.h LuaFunctions.h \
	LuaHelpers.cpp LuaHelpers.h RageException.cpp RageLog.cpp \
	RageThreads.cpp RageTimer.cpp RageTimer.h RageUtil.cpp \
	RageUtil_FileDB.cpp RageUtil_FileDB.h global.cpp global.h \
	tests/test_file_readers.cpp
am_test_file_readers_OBJECTS = $(am__objects_50) \
	test_file_readers.$(OBJEXT)
test_file_readers_OBJECTS = $(am_test_file_readers_OBJECTS)
test_file_readers_LDADD = $(LDADD)
am__test_threads_SOURCES_DIST = archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h arch/ArchHooks/ArchHooks.cpp \
	arch/ArchHooks/ArchHooks.h arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h arch/Threads/Threads.h \
	arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	tests/test_misc.cpp tests/test_misc.h IniFile.cpp IniFile.h \
	XmlFile.cpp XmlFile.h DateTime.cpp DateTime.h PrefsManager.cpp \
	PrefsManager.h Preference.cpp Preference.h LuaFunctions.h \
	LuaHelpers.cpp LuaHelpers.h RageException.cpp RageLog.cpp \
	RageThreads.cpp RageTimer.cpp RageTimer.h RageUtil.cpp \
	RageUtil_FileDB.cpp RageUtil_FileDB.h global.cpp global.h \
	tests/test_threads.cpp
am_test_threads_OBJECTS = $(am__objects_50) test_threads.$(OBJEXT)
test_threads_OBJECTS = $(am_test_threads_OBJECTS)
test_threads_LDADD = $(LDADD)
am__test_timing_data_SOURCES_DIST =  \
	archutils/Unix/AssertionHandler.cpp \
	archutils/Unix/GetSysInfo.cpp archutils/Unix/GetSysInfo.h \
	archutils/Unix/SignalHandler.cpp \
	archutils/Unix/SignalHandler.h \
	archutils/Unix/LinuxThreadHelpers.cpp \
	archutils/Unix/LinuxThreadHelpers.h \
	archutils/Unix/RunningUnderValgrind.cpp \
	archutils/Unix/RunningUnderValgrind.h \
	archutils/Unix/EmergencyShutdown.cpp \
	archutils/Unix/EmergencyShutdown.h \
	archutils/Unix/Backtrace.cpp archutils/Unix/Backtrace.h \
	archutils/Unix/BacktraceNames.cpp \
	archutils/Unix/BacktraceNames.h \
	archutils/Unix/CrashHandler.cpp archutils/Unix/CrashHandler.h \
	archutils/Unix/CrashHandlerChild.cpp \
	archutils/Unix/CrashHandlerInternal.h pcre/chartables.c \
	pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c \
	pcre/pcre.h pcre/study.c RageFileBasic.cpp RageFileBasic.h \
	RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h \
	RageFileManager.cpp RageFileManager.h RageFileDriverDirect.cpp \
	RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp \
	RageFileDriverDirectHelpers.h RageFileDriverMemory.cpp \
	RageFileDriverMemory.h RageFileDriverZip.cpp \
	RageFileDriverZip.h RageFileDriverDeflate.cpp \
	RageFileDriverDeflate.h RageFileDriverSlice.cpp \
	RageFileDriverSlice.h RageFileDriverTimeout.cpp \
	RageFileDriverTimeout.h arch/ArchHooks/ArchHooks.cpp \
	arch/ArchHooks/ArchHooks.h arch/ArchHooks/ArchHooks_Unix.cpp \
	arch/ArchHooks/ArchHooks_Unix.h arch/Threads/Threads.h \
	arch/Threads/Threads_Pthreads.cpp \
	arch/Threads/Threads_Pthreads.h arch/Dialog/Dialog.cpp \
	arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h \
	tests/test_misc.cpp tests/test_misc.h IniFile.cpp IniFile.h \
	XmlFile.cpp XmlFile.h DateTime.cpp DateTime.h PrefsManager.cpp \
	PrefsManager.h Preference.cpp Preference.h LuaFunctions.h \
	LuaHelpers.cpp LuaHelpers.h RageException.cpp RageLog.cpp \
	RageThreads.cpp RageTimer.cpp RageTimer.h RageUtil.cpp \
	RageUtil_FileDB.cpp RageUtil_FileDB.h global.cpp global.h \
	tests/test_timing_data.cpp TimingData.cpp TimingData.h
am_test_timing_data_OBJECTS = $(am__objects_50) \
	test_timing_data.$(OBJEXT) TimingData.$(OBJEXT)
test_timing_data_OBJECTS = $(am_test_timing_data_OBJECTS)
test_timing_data_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I.
depcomp = $(SHELL) $(top_srcdir)/autoconf/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(GtkModule_so_SOURCES) $(stepmania_SOURCES) \
	$(test_audio_readers_SOURCES) $(test_file_errors_SOURCES) \
	$(test_file_readers_SOURCES) $(test_threads_SOURCES) \
	$(test_timing_data_SOURCES)
DIST_SOURCES = $(am__GtkModule_so_SOURCES_DIST) \
	$(am__stepmania_SOURCES_DIST) \
	$(am__test_audio_readers_SOURCES_DIST) \
	$(am__test_file_errors_SOURCES_DIST) \
	$(am__test_file_readers_SOURCES_DIST) \
	$(am__test_threads_SOURCES_DIST) \
	$(am__test_timing_data_SOURCES_DIST)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run aclocal-1.9
ALSA_CFLAGS = 
ALSA_LIBS = -lasound
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run tar
AUDIO_LIBS =  -lvorbisfile -lvorbis -logg -lmad
AUTOCONF = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run autoconf
AUTOHEADER = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run autoheader
AUTOMAKE = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run automake-1.9
AWK = mawk
BUILD_TESTS_FALSE = 
BUILD_TESTS_TRUE = #
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -Wall -W -Wno-unused -Wno-switch -O3
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wall -W -Wno-unused -Wno-switch -O3
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
GTK_CFLAGS = -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include  
GTK_LIBS = -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lm -lpangocairo-1.0 -lfontconfig -lXext -lXrender -lXinerama -lXi -lXrandr -lXcursor -lXfixes -lpango-1.0 -lcairo -lX11 -lgobject-2.0 -lgmodule-2.0 -ldl -lglib-2.0  
HAVE_ALSA_FALSE = #
HAVE_ALSA_TRUE = 
HAVE_FFMPEG_FALSE = 
HAVE_FFMPEG_TRUE = #
HAVE_GTK_FALSE = #
HAVE_GTK_TRUE = 
HAVE_MP3_FALSE = #
HAVE_MP3_TRUE = 
HAVE_OSS_FALSE = #
HAVE_OSS_TRUE = 
HAVE_SDL_FALSE = 
HAVE_SDL_TRUE = #
HAVE_VORBIS_FALSE = #
HAVE_VORBIS_TRUE = 
HAVE_X11_FALSE = #
HAVE_X11_TRUE = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS =  -rdynamic
LIBICONV = 
LIBOBJS = 
LIBS = -lavformat -lavcodec  -lpng -lz -lm -ljpeg -lz $(LUA_LIBS) -lpthread
LINUX_FALSE = #
LINUX_TRUE = 
LTLIBICONV = 
LTLIBOBJS = 
LUA_CFLAGS = -I/usr/include/lua50
LUA_CONFIG = lua-config50
LUA_LIBS = /usr/lib/liblualib50.a /usr/lib/liblua50.a
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/mark/StepMania/cvs/stepmania/autoconf/missing --run makeinfo
OBJEXT = o
PACKAGE = StepMania
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
RANLIB = ranlib
SDL_CFLAGS = 
SDL_CONFIG = 
SDL_LIBS = 
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
UNIX_FALSE = #
UNIX_TRUE = 
USE_CRASH_HANDLER_FALSE = #
USE_CRASH_HANDLER_TRUE = 
VERSION = 3.001
WITHOUT_NETWORKING_FALSE = 
WITHOUT_NETWORKING_TRUE = #
XCFLAGS = 
XLIBS = -L/usr/X11R6/lib -lX11 -lXtst -lGL -lGLU
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/mark/StepMania/cvs/stepmania/autoconf/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc

#TESTS += test_notedata
#test_notedata_SOURCES = \
#		$(all_test_SOURCES) \
#		tests/test_notedata.cpp \
#		NoteData.cpp NoteData.h NoteDataUtil.cpp NoteDataUtil.h \
#		NewNoteData.cpp NewNoteData.h \
#		NoteTypes.cpp NoteTypes.h \
#		TimingData.cpp TimingData.h
#NewNoteDataUtil.cpp NewNoteDataUtil.h
TESTS = test_audio_readers test_file_readers test_file_errors \
	test_timing_data test_threads
AM_LDFLAGS = 

# Relax inlining; the default of 600 takes way too long to compile and
# generates enormous output.
AM_CXXFLAGS = -finline-limit=300 $(XCFLAGS) $(am__append_5)
AM_CFLAGS = 
Screens = Screen.cpp Screen.h ScreenAttract.cpp ScreenAttract.h \
	ScreenBookkeeping.cpp ScreenBookkeeping.h ScreenBranch.cpp \
	ScreenBranch.h ScreenCenterImage.cpp ScreenCenterImage.h \
	ScreenCredits.cpp ScreenCredits.h ScreenDebugOverlay.cpp \
	ScreenDebugOverlay.h ScreenDemonstration.cpp \
	ScreenDemonstration.h ScreenDimensions.h ScreenEdit.cpp \
	ScreenEdit.h ScreenEditCoursesMenu.cpp ScreenEditCoursesMenu.h \
	EditCoursesSongMenu.cpp EditCoursesSongMenu.h \
	ScreenEditMenu.cpp ScreenEditMenu.h ScreenEnding.cpp \
	ScreenEnding.h ScreenEndlessBreak.cpp ScreenEndlessBreak.h \
	ScreenEvaluation.cpp ScreenEvaluation.h ScreenExit.cpp \
	ScreenExit.h ScreenNetEvaluation.cpp ScreenNetEvaluation.h \
	ScreenNetSelectMusic.cpp ScreenNetSelectMusic.h \
	ScreenNetSelectBase.cpp ScreenNetSelectBase.h \
	ScreenNetRoom.cpp ScreenNetRoom.h ScreenEz2SelectMusic.cpp \
	ScreenEz2SelectMusic.h ScreenEz2SelectPlayer.cpp \
	ScreenEz2SelectPlayer.h ScreenGameplay.cpp ScreenGameplay.h \
	ScreenHowToPlay.cpp ScreenHowToPlay.h ScreenInstructions.cpp \
	ScreenInstructions.h ScreenJukebox.cpp ScreenJukebox.h \
	ScreenLogo.cpp ScreenLogo.h ScreenMapControllers.cpp \
	ScreenMapControllers.h ScreenMessage.cpp ScreenMessage.h \
	ScreenMiniMenu.cpp ScreenMiniMenu.h ScreenMusicScroll.cpp \
	ScreenMusicScroll.h ScreenNameEntry.cpp ScreenNameEntry.h \
	ScreenNameEntryTraditional.cpp ScreenNameEntryTraditional.h \
	ScreenOptions.cpp ScreenOptions.h ScreenOptionsMaster.cpp \
	ScreenOptionsMaster.h ScreenOptionsMasterPrefs.cpp \
	ScreenOptionsMasterPrefs.h ScreenPackages.cpp ScreenPackages.h \
	ScreenPlayerOptions.cpp ScreenPlayerOptions.h \
	ScreenNetworkOptions.h ScreenNetworkOptions.cpp \
	ScreenProfileOptions.cpp ScreenProfileOptions.h \
	ScreenPrompt.cpp ScreenPrompt.h ScreenRanking.cpp \
	ScreenRanking.h ScreenReloadSongs.cpp ScreenReloadSongs.h \
	ScreenSandbox.cpp ScreenSandbox.h ScreenSaveSync.cpp \
	ScreenSaveSync.h ScreenSelect.cpp ScreenSelect.h \
	ScreenSelectCharacter.cpp ScreenSelectCharacter.h \
	ScreenSelectDifficulty.cpp ScreenSelectDifficulty.h \
	ScreenSelectGroup.cpp ScreenSelectGroup.h \
	ScreenSelectMaster.cpp ScreenSelectMaster.h \
	ScreenSelectMode.cpp ScreenSelectMode.h ScreenSelectMusic.cpp \
	ScreenSelectMusic.h ScreenSelectStyle.cpp ScreenSelectStyle.h \
	ScreenSyncOverlay.cpp ScreenSyncOverlay.h \
	ScreenSystemLayer.cpp ScreenSystemLayer.h ScreenSetTime.cpp \
	ScreenSetTime.h ScreenSongOptions.cpp ScreenSongOptions.h \
	ScreenSplash.cpp ScreenSplash.h ScreenStage.cpp ScreenStage.h \
	ScreenTest.cpp ScreenTest.h ScreenTestFonts.cpp \
	ScreenTestFonts.h ScreenTestInput.cpp ScreenTestInput.h \
	ScreenTestLights.cpp ScreenTestLights.h ScreenTestSound.cpp \
	ScreenTestSound.h ScreenTextEntry.cpp ScreenTextEntry.h \
	ScreenTitleMenu.cpp ScreenTitleMenu.h ScreenUnlock.cpp \
	ScreenUnlock.h ScreenWithMenuElements.cpp \
	ScreenWithMenuElements.h $(am__append_1)
DataStructures = \
ActorCommands.cpp ActorCommands.h Attack.cpp Attack.h AutoKeysounds.cpp AutoKeysounds.h \
BackgroundUtil.cpp BackgroundUtil.h \
BannerCache.cpp BannerCache.h CatalogXml.cpp CatalogXml.h \
Character.cpp Character.h \
CodeDetector.cpp CodeDetector.h \
Command.cpp Command.h \
CommonMetrics.cpp CommonMetrics.h \
Difficulty.cpp Difficulty.h EnumHelper.cpp EnumHelper.h Course.cpp Course.h \
CourseUtil.cpp CourseUtil.h DateTime.cpp DateTime.h Font.cpp Font.h FontCharAliases.cpp FontCharAliases.h \
FontCharmaps.cpp FontCharmaps.h Game.cpp Game.h GameCommand.cpp GameCommand.h \
GameConstantsAndTypes.cpp GameConstantsAndTypes.h \
GameInput.cpp GameInput.h Grade.cpp Grade.h HighScore.cpp HighScore.h Inventory.cpp Inventory.h LuaFunctions.h \
LuaReference.cpp LuaReference.h \
LyricsLoader.cpp LyricsLoader.h MenuInput.h \
NoteData.cpp NoteData.h NoteDataUtil.cpp NoteDataUtil.h NoteDataWithScoring.cpp NoteDataWithScoring.h \
NoteFieldPositioning.cpp NoteFieldPositioning.h NoteTypes.cpp NoteTypes.h NotesLoader.cpp NotesLoader.h \
NotesLoaderBMS.cpp NotesLoaderBMS.h NotesLoaderDWI.cpp NotesLoaderDWI.h NotesLoaderKSF.cpp NotesLoaderKSF.h \
NotesLoaderSM.cpp NotesLoaderSM.h NotesWriterDWI.cpp NotesWriterDWI.h NotesWriterSM.cpp NotesWriterSM.h \
OptionRowHandler.cpp OptionRowHandler.h \
PlayerAI.cpp PlayerAI.h PlayerNumber.cpp PlayerNumber.h PlayerOptions.cpp PlayerOptions.h \
PlayerStageStats.cpp PlayerStageStats.h \
PlayerState.cpp PlayerState.h Preference.cpp Preference.h Profile.cpp Profile.h \
RandomSample.cpp RandomSample.h RadarValues.cpp RadarValues.h \
RoomWheel.cpp RoomWheel.h ScreenDimensions.h ScreenDimensions.cpp \
ScoreKeeper.h ScoreKeeperMAX2.cpp ScoreKeeperMAX2.h \
ScoreKeeperRave.cpp ScoreKeeperRave.h Song.cpp song.h SongCacheIndex.cpp SongCacheIndex.h \
SongOptions.cpp SongOptions.h SongUtil.cpp SongUtil.h StageStats.cpp StageStats.h Steps.cpp Steps.h \
StepsUtil.cpp StepsUtil.h Style.cpp Style.h StyleUtil.cpp StyleUtil.h \
SubscriptionManager.h \
StyleInput.h TimingData.cpp TimingData.h \
ThemeMetric.h \
Trail.cpp Trail.h TrailUtil.cpp TrailUtil.h TitleSubstitution.cpp TitleSubstitution.h

FileTypes = IniFile.cpp IniFile.h \
		MsdFile.cpp MsdFile.h \
		XmlFile.cpp XmlFile.h

StepMania = StdString.h StepMania.cpp StepMania.h global.cpp global.h \
	$(am__append_8)
LoadingWindow = arch/LoadingWindow/LoadingWindow.h \
	arch/LoadingWindow/LoadingWindow_Null.h $(am__append_2) \
	$(am__append_7)
Sound = arch/Sound/RageSoundDriver.h \
	arch/Sound/RageSoundDriver_Null.cpp \
	arch/Sound/RageSoundDriver_Null.h \
	arch/Sound/RageSoundDriver_Generic_Software.cpp \
	arch/Sound/RageSoundDriver_Generic_Software.h $(am__append_3) \
	$(am__append_4)
ArchHooks = arch/ArchHooks/ArchHooks.cpp arch/ArchHooks/ArchHooks.h \
	$(am__append_13)
InputHandler = arch/InputHandler/InputHandler.cpp \
	arch/InputHandler/InputHandler.h \
	arch/InputHandler/InputHandler_MonkeyKeyboard.cpp \
	arch/InputHandler/InputHandler_MonkeyKeyboard.h \
	$(am__append_9) $(am__append_11) $(am__append_19)
MovieTexture = arch/MovieTexture/MovieTexture.cpp \
	arch/MovieTexture/MovieTexture.h \
	arch/MovieTexture/MovieTexture_Null.cpp \
	arch/MovieTexture/MovieTexture_Null.h $(am__append_6)
Lights = arch/Lights/LightsDriver.h \
	arch/Lights/LightsDriver_SystemMessage.cpp \
	arch/Lights/LightsDriver_SystemMessage.h $(am__append_15)
MemoryCard = arch/MemoryCard/MemoryCardDriver.cpp \
	arch/MemoryCard/MemoryCardDriver.h $(am__append_18)
LowLevelWindow = arch/LowLevelWindow/LowLevelWindow.h $(am__append_10) \
	$(am__append_12)
ArchUtils = $(am__append_16) $(am__append_17)
Dialog = arch/Dialog/Dialog.cpp arch/Dialog/Dialog.h arch/Dialog/DialogDriver.h
Threads = arch/Threads/Threads.h $(am__append_14)
Arch = $(LoadingWindow) $(Sound) $(ArchHooks) $(InputHandler) $(MovieTexture) \
	   $(Lights) $(MemoryCard) $(LowLevelWindow) $(ArchUtils) $(Dialog) $(Threads) \
	   arch/arch.h arch/arch.cpp arch/arch_default.h arch/arch_platform.h

RageSoundFileReaders = RageSoundReader_WAV.cpp RageSoundReader_WAV.h \
	$(am__append_20) $(am__append_21)
ActorsInGameplayAndMenus = \
BGAnimation.cpp BGAnimation.h BGAnimationLayer.cpp BGAnimationLayer.h Banner.cpp Banner.h \
DifficultyIcon.cpp DifficultyIcon.h \
MeterDisplay.cpp MeterDisplay.h StreamDisplay.cpp StreamDisplay.h \
Transition.cpp Transition.h

ActorsInMenus = \
ActiveAttackList.cpp ActiveAttackList.h BPMDisplay.cpp BPMDisplay.h ComboGraph.cpp ComboGraph.h \
CourseContentsList.cpp CourseContentsList.h CourseEntryDisplay.cpp CourseEntryDisplay.h \
DifficultyDisplay.cpp DifficultyDisplay.h DifficultyList.cpp DifficultyList.h \
DifficultyMeter.cpp DifficultyMeter.h DifficultyRating.cpp DifficultyRating.h \
DualScrollBar.cpp DualScrollBar.h \
EditCoursesMenu.cpp EditCoursesMenu.h EditMenu.cpp EditMenu.h FadingBanner.cpp FadingBanner.h \
GradeDisplay.cpp GradeDisplay.h GraphDisplay.cpp GraphDisplay.h GrooveGraph.cpp GrooveGraph.h \
GrooveRadar.cpp GrooveRadar.h GroupList.cpp GroupList.h HelpDisplay.cpp HelpDisplay.h \
MemoryCardDisplay.cpp MemoryCardDisplay.h \
MenuTimer.cpp MenuTimer.h ModeSwitcher.cpp ModeSwitcher.h MusicBannerWheel.cpp MusicBannerWheel.h \
MusicList.cpp MusicList.h MusicSortDisplay.cpp MusicSortDisplay.h MusicWheel.cpp MusicWheel.h \
MusicWheelItem.cpp MusicWheelItem.h OptionIcon.cpp OptionIcon.h OptionIconRow.cpp OptionIconRow.h \
OptionRow.cpp OptionRow.h OptionsCursor.cpp OptionsCursor.h \
PaneDisplay.cpp PaneDisplay.h ScrollBar.cpp ScrollBar.h \
ScrollingList.cpp ScrollingList.h SnapDisplay.cpp SnapDisplay.h \
TextBanner.cpp TextBanner.h WheelBase.cpp WheelBase.h WheelItemBase.cpp WheelItemBase.h \
WheelNotifyIcon.cpp WheelNotifyIcon.h

ActorsInGameplay = \
ArrowEffects.cpp ArrowEffects.h AttackDisplay.cpp AttackDisplay.h \
Background.cpp Background.h BeginnerHelper.cpp BeginnerHelper.h CombinedLifeMeterTug.cpp CombinedLifeMeterTug.h \
Combo.cpp Combo.h DancingCharacters.cpp DancingCharacters.h Foreground.cpp Foreground.h GhostArrow.cpp GhostArrow.h \
GhostArrowRow.cpp GhostArrowRow.h HoldGhostArrow.cpp HoldGhostArrow.h HoldJudgment.cpp HoldJudgment.h \
Judgment.cpp Judgment.h LifeMeter.h LifeMeterBar.cpp LifeMeterBar.h \
LifeMeterBattery.cpp LifeMeterBattery.h LifeMeterTime.cpp LifeMeterTime.h \
LyricDisplay.cpp LyricDisplay.h NoteDisplay.cpp NoteDisplay.h NoteField.cpp NoteField.h \
PercentageDisplay.cpp PercentageDisplay.h Player.cpp Player.h \
ReceptorArrow.cpp ReceptorArrow.h ReceptorArrowRow.cpp ReceptorArrowRow.h \
ScoreDisplay.cpp ScoreDisplay.h \
ScoreDisplayBattle.cpp ScoreDisplayBattle.h \
ScoreDisplayCalories.cpp ScoreDisplayCalories.h \
ScoreDisplayLifeTime.cpp ScoreDisplayLifeTime.h \
ScoreDisplayNormal.cpp ScoreDisplayNormal.h ScoreDisplayOni.cpp ScoreDisplayOni.h \
ScoreDisplayPercentage.cpp ScoreDisplayPercentage.h ScoreDisplayRave.cpp ScoreDisplayRave.h

PCRE = pcre/chartables.c pcre/get.c pcre/internal.h pcre/maketables.c pcre/pcre.c pcre/pcre.h pcre/study.c
RageFile = \
RageFileBasic.cpp RageFileBasic.h \
RageFile.cpp RageFile.h RageFileDriver.cpp RageFileDriver.h RageFileManager.cpp RageFileManager.h \
RageFileDriverDirect.cpp RageFileDriverDirect.h RageFileDriverDirectHelpers.cpp RageFileDriverDirectHelpers.h \
RageFileDriverMemory.cpp RageFileDriverMemory.h RageFileDriverZip.cpp RageFileDriverZip.h \
RageFileDriverDeflate.cpp RageFileDriverDeflate.h \
RageFileDriverSlice.cpp RageFileDriverSlice.h \
RageFileDriverTimeout.cpp RageFileDriverTimeout.h

Rage = $(PCRE) $(RageFile) $(RageSoundFileReaders) \
RageBitmapTexture.cpp RageBitmapTexture.h RageDisplay.cpp RageDisplay.h RageDisplay_OGL.cpp RageDisplay_OGL.h \
RageDisplay_OGL_Extensions.cpp RageDisplay_OGL_Extensions.h \
RageDisplay_Null.cpp RageDisplay_Null.h RageException.cpp RageException.h RageInput.cpp RageInput.h \
RageInputDevice.cpp RageInputDevice.h RageLog.cpp RageLog.h RageMath.cpp RageMath.h \
RageModelGeometry.cpp RageModelGeometry.h RageSound.cpp RageSound.h RageSoundManager.cpp RageSoundManager.h \
RageSoundUtil.cpp RageSoundUtil.h RageSoundMixBuffer.cpp RageSoundMixBuffer.h \
RageSoundPosMap.cpp RageSoundPosMap.h RageSoundReader.h RageSoundReader_FileReader.cpp RageSoundReader_FileReader.h \
RageSoundReader_Preload.cpp RageSoundReader_Preload.h RageSoundReader_Resample.cpp RageSoundReader_Resample.h \
RageSoundReader_Resample_Fast.cpp RageSoundReader_Resample_Fast.h \
RageSoundReader_Resample_Good.cpp RageSoundReader_Resample_Good.h \
RageSoundReader_Chain.cpp RageSoundReader_Chain.h \
RageSoundResampler.cpp RageSoundResampler.h \
RageSurface.cpp RageSurface.h RageSurfaceUtils.cpp RageSurfaceUtils.h \
RageSurfaceUtils_Dither.cpp RageSurfaceUtils_Dither.h \
RageSurface_Save_JPEG.cpp RageSurface_Save_JPEG.h \
RageSurfaceUtils_Palettize.cpp RageSurfaceUtils_Palettize.h \
RageSurfaceUtils_Zoom.cpp RageSurfaceUtils_Zoom.h \
RageSurface_Load.cpp RageSurface_Load.h RageSurface_Load_PNG.cpp RageSurface_Load_PNG.h \
RageSurface_Load_JPEG.cpp RageSurface_Load_JPEG.h RageSurface_Load_GIF.cpp RageSurface_Load_GIF.h \
RageSurface_Load_BMP.cpp RageSurface_Load_BMP.h \
RageSurface_Load_XPM.cpp RageSurface_Load_XPM.h RageTexture.cpp RageTexture.h \
RageSurface_Save_BMP.cpp RageSurface_Save_BMP.h \
RageTextureID.cpp RageTextureID.h RageTextureManager.cpp RageTextureManager.h RageThreads.cpp RageThreads.h \
RageTimer.cpp RageTimer.h RageTypes.h RageUtil.cpp RageUtil.h RageUtil_CharConversions.cpp RageUtil_CharConversions.h \
RageUtil_BackgroundLoader.cpp RageUtil_BackgroundLoader.h RageUtil_FileDB.cpp RageUtil_FileDB.h RageUtil_CircularBuffer.h \
RageUtil_AutoPtr.h \
RageUtil_WorkerThread.cpp RageUtil_WorkerThread.h

Actors = \
Actor.cpp Actor.h ActorCollision.h ActorFrame.cpp ActorFrame.h \
ActorScroller.cpp ActorScroller.h ActorUtil.cpp ActorUtil.h \
AutoActor.cpp AutoActor.h \
BitmapText.cpp BitmapText.h Model.cpp Model.h \
ModelManager.cpp ModelManager.h ModelTypes.cpp ModelTypes.h \
Quad.cpp Quad.h \
RollingNumbers.cpp RollingNumbers.h Sprite.cpp Sprite.h

GlobalSingletons = AnnouncerManager.cpp AnnouncerManager.h \
	Bookkeeper.cpp Bookkeeper.h CryptManager.cpp CryptManager.h \
	FontManager.cpp FontManager.h GameSoundManager.cpp \
	GameSoundManager.h GameManager.cpp GameManager.h GameState.cpp \
	GameState.h InputFilter.cpp InputFilter.h InputMapper.cpp \
	InputMapper.h InputQueue.cpp InputQueue.h LuaManager.cpp \
	LuaManager.h LightsManager.cpp LightsManager.h \
	MemoryCardManager.cpp MemoryCardManager.h MessageManager.cpp \
	MessageManager.h NetworkSyncManager.cpp NetworkSyncManager.h \
	NetworkSyncServer.cpp NetworkSyncServer.h NoteSkinManager.cpp \
	NoteSkinManager.h PrefsManager.cpp PrefsManager.h \
	ProfileManager.cpp ProfileManager.h ScreenManager.cpp \
	ScreenManager.h SongManager.cpp SongManager.h StatsManager.cpp \
	StatsManager.h ThemeManager.cpp ThemeManager.h \
	UnlockManager.cpp UnlockManager.h $(am__append_22)
crypto = \
crypto/CryptBn.cpp crypto/CryptBn.h crypto/CryptMD5.cpp crypto/CryptMD5.h crypto/CryptNoise.cpp \
crypto/CryptPrime.cpp crypto/CryptPrime.h crypto/CryptRSA.cpp crypto/CryptRSA.h \
crypto/CryptRand.cpp crypto/CryptRand.h crypto/CryptSH512.cpp crypto/CryptSH512.h \
crypto/CryptSHA.cpp crypto/CryptSHA.h

cryptopp = \
crypto51/algebra.cpp crypto51/algebra.h crypto51/algparam.cpp crypto51/algparam.h crypto51/argnames.h \
crypto51/asn.cpp crypto51/asn.h crypto51/config.h crypto51/cryptlib.cpp crypto51/cryptlib.h crypto51/files.cpp \
crypto51/files.h crypto51/filters.cpp crypto51/filters.h crypto51/fltrimpl.h crypto51/integer.cpp crypto51/integer.h \
crypto51/iterhash.cpp crypto51/iterhash.h crypto51/misc.cpp crypto51/misc.h crypto51/modarith.h \
crypto51/mqueue.cpp crypto51/mqueue.h crypto51/nbtheory.cpp crypto51/nbtheory.h \
crypto51/oids.h crypto51/osrng.cpp crypto51/osrng.h crypto51/pch.h crypto51/pkcspad.cpp \
crypto51/pkcspad.h crypto51/pubkey.cpp crypto51/pubkey.h crypto51/queue.cpp crypto51/queue.h \
crypto51/rsa.cpp crypto51/rsa.h crypto51/secblock.h crypto51/seckey.h crypto51/sha.cpp \
crypto51/sha.h crypto51/simple.h crypto51/smartptr.h crypto51/words.h \
CryptHelpers.cpp CryptHelpers.h

main_SOURCES = $(Screens) \
		$(DataStructures) \
		$(FileTypes) \
		$(StepMania) \
		$(Arch) \
		$(ActorsInGameplayAndMenus) \
		$(ActorsInMenus) \
		$(ActorsInGameplay) \
		$(Rage) \
		$(Actors) \
		$(GlobalSingletons) \
		$(crypto) \
		$(cryptopp)

main_LDADD = \
		  $(AUDIO_LIBS) \
		  $(SDL_LIBS) \
		  $(XLIBS) \
		  $(srcdir)/libresample/libresample.a

stepmania_SOURCES = $(main_SOURCES)
stepmania_LDADD = $(main_LDADD)
GtkModule_so_LDFLAGS = -rdynamic -shared
GtkModule_so_CPPFLAGS = $(GTK_CFLAGS) -fPIC
GtkModule_so_LDADD = $(GTK_LIBS)
GtkModule_so_SOURCES = arch/LoadingWindow/LoadingWindow_GtkModule.cpp
all_test_SOURCES = \
		$(ArchUtils) \
		$(PCRE) \
		$(RageFile) \
		$(ArchHooks) \
		$(Threads) \
		$(Dialog) \
		tests/test_misc.cpp tests/test_misc.h \
		IniFile.cpp IniFile.h \
		XmlFile.cpp XmlFile.h \
		DateTime.cpp DateTime.h \
		PrefsManager.cpp PrefsManager.h \
		Preference.cpp Preference.h \
		LuaFunctions.h LuaHelpers.cpp LuaHelpers.h \
		RageException.cpp \
		RageLog.cpp \
		RageThreads.cpp \
		RageTimer.cpp RageTimer.h \
		RageUtil.cpp \
		RageUtil_FileDB.cpp RageUtil_FileDB.h \
		global.cpp global.h

test_audio_readers_SOURCES = \
		$(RageSoundFileReaders) \
		$(all_test_SOURCES) \
		tests/test_audio_readers.cpp \
		RageSoundUtil.cpp RageSoundUtil.h RageSoundMixBuffer.cpp RageSoundMixBuffer.h \
		RageSoundReader_FileReader.cpp RageSoundReader_FileReader.h \
		RageSoundReader_Preload.cpp RageSoundReader_Preload.h \
		RageSoundReader_Resample.cpp  RageSoundReader_Resample.h \
		RageSoundReader_Resample_Fast.cpp RageSoundReader_Resample_Fast.h \
		RageSoundReader_Resample_Good.cpp RageSoundReader_Resample_Good.h \
		RageSoundReader_Chain.cpp RageSoundReader_Chain.h \
		RageSoundResampler.cpp RageSoundResampler.h

test_audio_readers_LDADD = \
		$(AUDIO_LIBS) \
		$(srcdir)/libresample/libresample.a

test_file_readers_SOURCES = \
		$(all_test_SOURCES) \
		tests/test_file_readers.cpp

test_file_errors_SOURCES = \
		$(all_test_SOURCES) \
		tests/test_file_errors.cpp \
		MsdFile.cpp MsdFile.h \
		XmlFile.cpp XmlFile.h \
		CryptManager.cpp CryptManager.h $(cryptopp) $(crypto)

test_timing_data_SOURCES = \
		$(all_test_SOURCES) \
		tests/test_timing_data.cpp \
		TimingData.cpp TimingData.h

test_threads_SOURCES = \
		$(all_test_SOURCES) \
		tests/test_threads.cpp

INCLUDES = $(LUA_CFLAGS) $(SDL_CFLAGS)
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

config.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in: # $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)
GtkModule.so$(EXEEXT): $(GtkModule_so_OBJECTS) $(GtkModule_so_DEPENDENCIES) 
	@rm -f GtkModule.so$(EXEEXT)
	$(CXXLINK) $(GtkModule_so_LDFLAGS) $(GtkModule_so_OBJECTS) $(GtkModule_so_LDADD) $(LIBS)
stepmania$(EXEEXT): $(stepmania_OBJECTS) $(stepmania_DEPENDENCIES) 
	@rm -f stepmania$(EXEEXT)
	$(CXXLINK) $(stepmania_LDFLAGS) $(stepmania_OBJECTS) $(stepmania_LDADD) $(LIBS)
test_audio_readers$(EXEEXT): $(test_audio_readers_OBJECTS) $(test_audio_readers_DEPENDENCIES) 
	@rm -f test_audio_readers$(EXEEXT)
	$(CXXLINK) $(test_audio_readers_LDFLAGS) $(test_audio_readers_OBJECTS) $(test_audio_readers_LDADD) $(LIBS)
test_file_errors$(EXEEXT): $(test_file_errors_OBJECTS) $(test_file_errors_DEPENDENCIES) 
	@rm -f test_file_errors$(EXEEXT)
	$(CXXLINK) $(test_file_errors_LDFLAGS) $(test_file_errors_OBJECTS) $(test_file_errors_LDADD) $(LIBS)
test_file_readers$(EXEEXT): $(test_file_readers_OBJECTS) $(test_file_readers_DEPENDENCIES) 
	@rm -f test_file_readers$(EXEEXT)
	$(CXXLINK) $(test_file_readers_LDFLAGS) $(test_file_readers_OBJECTS) $(test_file_readers_LDADD) $(LIBS)
test_threads$(EXEEXT): $(test_threads_OBJECTS) $(test_threads_DEPENDENCIES) 
	@rm -f test_threads$(EXEEXT)
	$(CXXLINK) $(test_threads_LDFLAGS) $(test_threads_OBJECTS) $(test_threads_LDADD) $(LIBS)
test_timing_data$(EXEEXT): $(test_timing_data_OBJECTS) $(test_timing_data_DEPENDENCIES) 
	@rm -f test_timing_data$(EXEEXT)
	$(CXXLINK) $(test_timing_data_LDFLAGS) $(test_timing_data_OBJECTS) $(test_timing_data_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/ALSA9Dynamic.Po
include ./$(DEPDIR)/ALSA9Helpers.Po
include ./$(DEPDIR)/ActiveAttackList.Po
include ./$(DEPDIR)/Actor.Po
include ./$(DEPDIR)/ActorCommands.Po
include ./$(DEPDIR)/ActorFrame.Po
include ./$(DEPDIR)/ActorScroller.Po
include ./$(DEPDIR)/ActorUtil.Po
include ./$(DEPDIR)/AnnouncerManager.Po
include ./$(DEPDIR)/ArchHooks.Po
include ./$(DEPDIR)/ArchHooks_Unix.Po
include ./$(DEPDIR)/ArrowEffects.Po
include ./$(DEPDIR)/AssertionHandler.Po
include ./$(DEPDIR)/Attack.Po
include ./$(DEPDIR)/AttackDisplay.Po
include ./$(DEPDIR)/AutoActor.Po
include ./$(DEPDIR)/AutoKeysounds.Po
include ./$(DEPDIR)/BGAnimation.Po
include ./$(DEPDIR)/BGAnimationLayer.Po
include ./$(DEPDIR)/BPMDisplay.Po
include ./$(DEPDIR)/Background.Po
include ./$(DEPDIR)/BackgroundUtil.Po
include ./$(DEPDIR)/Backtrace.Po
include ./$(DEPDIR)/BacktraceNames.Po
include ./$(DEPDIR)/Banner.Po
include ./$(DEPDIR)/BannerCache.Po
include ./$(DEPDIR)/BeginnerHelper.Po
include ./$(DEPDIR)/BitmapText.Po
include ./$(DEPDIR)/Bookkeeper.Po
include ./$(DEPDIR)/CatalogXml.Po
include ./$(DEPDIR)/Character.Po
include ./$(DEPDIR)/CodeDetector.Po
include ./$(DEPDIR)/CombinedLifeMeterTug.Po
include ./$(DEPDIR)/Combo.Po
include ./$(DEPDIR)/ComboGraph.Po
include ./$(DEPDIR)/Command.Po
include ./$(DEPDIR)/CommonMetrics.Po
include ./$(DEPDIR)/Course.Po
include ./$(DEPDIR)/CourseContentsList.Po
include ./$(DEPDIR)/CourseEntryDisplay.Po
include ./$(DEPDIR)/CourseUtil.Po
include ./$(DEPDIR)/CrashHandler.Po
include ./$(DEPDIR)/CrashHandlerChild.Po
include ./$(DEPDIR)/CryptBn.Po
include ./$(DEPDIR)/CryptHelpers.Po
include ./$(DEPDIR)/CryptMD5.Po
include ./$(DEPDIR)/CryptManager.Po
include ./$(DEPDIR)/CryptNoise.Po
include ./$(DEPDIR)/CryptPrime.Po
include ./$(DEPDIR)/CryptRSA.Po
include ./$(DEPDIR)/CryptRand.Po
include ./$(DEPDIR)/CryptSH512.Po
include ./$(DEPDIR)/CryptSHA.Po
include ./$(DEPDIR)/DancingCharacters.Po
include ./$(DEPDIR)/DateTime.Po
include ./$(DEPDIR)/Dialog.Po
include ./$(DEPDIR)/Difficulty.Po
include ./$(DEPDIR)/DifficultyDisplay.Po
include ./$(DEPDIR)/DifficultyIcon.Po
include ./$(DEPDIR)/DifficultyList.Po
include ./$(DEPDIR)/DifficultyMeter.Po
include ./$(DEPDIR)/DifficultyRating.Po
include ./$(DEPDIR)/DualScrollBar.Po
include ./$(DEPDIR)/EditCoursesMenu.Po
include ./$(DEPDIR)/EditCoursesSongMenu.Po
include ./$(DEPDIR)/EditMenu.Po
include ./$(DEPDIR)/EmergencyShutdown.Po
include ./$(DEPDIR)/EnumHelper.Po
include ./$(DEPDIR)/FadingBanner.Po
include ./$(DEPDIR)/Font.Po
include ./$(DEPDIR)/FontCharAliases.Po
include ./$(DEPDIR)/FontCharmaps.Po
include ./$(DEPDIR)/FontManager.Po
include ./$(DEPDIR)/Foreground.Po
include ./$(DEPDIR)/Game.Po
include ./$(DEPDIR)/GameCommand.Po
include ./$(DEPDIR)/GameConstantsAndTypes.Po
include ./$(DEPDIR)/GameInput.Po
include ./$(DEPDIR)/GameManager.Po
include ./$(DEPDIR)/GameSoundManager.Po
include ./$(DEPDIR)/GameState.Po
include ./$(DEPDIR)/GetSysInfo.Po
include ./$(DEPDIR)/GhostArrow.Po
include ./$(DEPDIR)/GhostArrowRow.Po
include ./$(DEPDIR)/Grade.Po
include ./$(DEPDIR)/GradeDisplay.Po
include ./$(DEPDIR)/GraphDisplay.Po
include ./$(DEPDIR)/GrooveGraph.Po
include ./$(DEPDIR)/GrooveRadar.Po
include ./$(DEPDIR)/GroupList.Po
include ./$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Po
include ./$(DEPDIR)/HelpDisplay.Po
include ./$(DEPDIR)/HighScore.Po
include ./$(DEPDIR)/HoldGhostArrow.Po
include ./$(DEPDIR)/HoldJudgment.Po
include ./$(DEPDIR)/IniFile.Po
include ./$(DEPDIR)/InputFilter.Po
include ./$(DEPDIR)/InputHandler.Po
include ./$(DEPDIR)/InputHandler_Linux_Joystick.Po
include ./$(DEPDIR)/InputHandler_MonkeyKeyboard.Po
include ./$(DEPDIR)/InputHandler_SDL.Po
include ./$(DEPDIR)/InputHandler_X11.Po
include ./$(DEPDIR)/InputMapper.Po
include ./$(DEPDIR)/InputQueue.Po
include ./$(DEPDIR)/Inventory.Po
include ./$(DEPDIR)/Judgment.Po
include ./$(DEPDIR)/LifeMeterBar.Po
include ./$(DEPDIR)/LifeMeterBattery.Po
include ./$(DEPDIR)/LifeMeterTime.Po
include ./$(DEPDIR)/LightsDriver_LinuxParallel.Po
include ./$(DEPDIR)/LightsDriver_LinuxWeedTech.Po
include ./$(DEPDIR)/LightsDriver_SystemMessage.Po
include ./$(DEPDIR)/LightsManager.Po
include ./$(DEPDIR)/LinuxThreadHelpers.Po
include ./$(DEPDIR)/LoadingWindow_Gtk.Po
include ./$(DEPDIR)/LoadingWindow_SDL.Po
include ./$(DEPDIR)/LowLevelWindow_SDL.Po
include ./$(DEPDIR)/LowLevelWindow_X11.Po
include ./$(DEPDIR)/LuaHelpers.Po
include ./$(DEPDIR)/LuaManager.Po
include ./$(DEPDIR)/LuaReference.Po
include ./$(DEPDIR)/LyricDisplay.Po
include ./$(DEPDIR)/LyricsLoader.Po
include ./$(DEPDIR)/MemoryCardDisplay.Po
include ./$(DEPDIR)/MemoryCardDriver.Po
include ./$(DEPDIR)/MemoryCardDriverThreaded_Linux.Po
include ./$(DEPDIR)/MemoryCardManager.Po
include ./$(DEPDIR)/MenuTimer.Po
include ./$(DEPDIR)/MessageManager.Po
include ./$(DEPDIR)/MeterDisplay.Po
include ./$(DEPDIR)/ModeSwitcher.Po
include ./$(DEPDIR)/Model.Po
include ./$(DEPDIR)/ModelManager.Po
include ./$(DEPDIR)/ModelTypes.Po
include ./$(DEPDIR)/MovieTexture.Po
include ./$(DEPDIR)/MovieTexture_FFMpeg.Po
include ./$(DEPDIR)/MovieTexture_Null.Po
include ./$(DEPDIR)/MsdFile.Po
include ./$(DEPDIR)/MusicBannerWheel.Po
include ./$(DEPDIR)/MusicList.Po
include ./$(DEPDIR)/MusicSortDisplay.Po
include ./$(DEPDIR)/MusicWheel.Po
include ./$(DEPDIR)/MusicWheelItem.Po
include ./$(DEPDIR)/NetworkSyncManager.Po
include ./$(DEPDIR)/NetworkSyncServer.Po
include ./$(DEPDIR)/NoteData.Po
include ./$(DEPDIR)/NoteDataUtil.Po
include ./$(DEPDIR)/NoteDataWithScoring.Po
include ./$(DEPDIR)/NoteDisplay.Po
include ./$(DEPDIR)/NoteField.Po
include ./$(DEPDIR)/NoteFieldPositioning.Po
include ./$(DEPDIR)/NoteSkinManager.Po
include ./$(DEPDIR)/NoteTypes.Po
include ./$(DEPDIR)/NotesLoader.Po
include ./$(DEPDIR)/NotesLoaderBMS.Po
include ./$(DEPDIR)/NotesLoaderDWI.Po
include ./$(DEPDIR)/NotesLoaderKSF.Po
include ./$(DEPDIR)/NotesLoaderSM.Po
include ./$(DEPDIR)/NotesWriterDWI.Po
include ./$(DEPDIR)/NotesWriterSM.Po
include ./$(DEPDIR)/OptionIcon.Po
include ./$(DEPDIR)/OptionIconRow.Po
include ./$(DEPDIR)/OptionRow.Po
include ./$(DEPDIR)/OptionRowHandler.Po
include ./$(DEPDIR)/OptionsCursor.Po
include ./$(DEPDIR)/PaneDisplay.Po
include ./$(DEPDIR)/PercentageDisplay.Po
include ./$(DEPDIR)/Player.Po
include ./$(DEPDIR)/PlayerAI.Po
include ./$(DEPDIR)/PlayerNumber.Po
include ./$(DEPDIR)/PlayerOptions.Po
include ./$(DEPDIR)/PlayerStageStats.Po
include ./$(DEPDIR)/PlayerState.Po
include ./$(DEPDIR)/Preference.Po
include ./$(DEPDIR)/PrefsManager.Po
include ./$(DEPDIR)/Profile.Po
include ./$(DEPDIR)/ProfileManager.Po
include ./$(DEPDIR)/Quad.Po
include ./$(DEPDIR)/RadarValues.Po
include ./$(DEPDIR)/RageBitmapTexture.Po
include ./$(DEPDIR)/RageDisplay.Po
include ./$(DEPDIR)/RageDisplay_Null.Po
include ./$(DEPDIR)/RageDisplay_OGL.Po
include ./$(DEPDIR)/RageDisplay_OGL_Extensions.Po
include ./$(DEPDIR)/RageException.Po
include ./$(DEPDIR)/RageFile.Po
include ./$(DEPDIR)/RageFileBasic.Po
include ./$(DEPDIR)/RageFileDriver.Po
include ./$(DEPDIR)/RageFileDriverDeflate.Po
include ./$(DEPDIR)/RageFileDriverDirect.Po
include ./$(DEPDIR)/RageFileDriverDirectHelpers.Po
include ./$(DEPDIR)/RageFileDriverMemory.Po
include ./$(DEPDIR)/RageFileDriverSlice.Po
include ./$(DEPDIR)/RageFileDriverTimeout.Po
include ./$(DEPDIR)/RageFileDriverZip.Po
include ./$(DEPDIR)/RageFileManager.Po
include ./$(DEPDIR)/RageInput.Po
include ./$(DEPDIR)/RageInputDevice.Po
include ./$(DEPDIR)/RageLog.Po
include ./$(DEPDIR)/RageMath.Po
include ./$(DEPDIR)/RageModelGeometry.Po
include ./$(DEPDIR)/RageSound.Po
include ./$(DEPDIR)/RageSoundDriver_ALSA9.Po
include ./$(DEPDIR)/RageSoundDriver_ALSA9_Software.Po
include ./$(DEPDIR)/RageSoundDriver_Generic_Software.Po
include ./$(DEPDIR)/RageSoundDriver_Null.Po
include ./$(DEPDIR)/RageSoundDriver_OSS.Po
include ./$(DEPDIR)/RageSoundManager.Po
include ./$(DEPDIR)/RageSoundMixBuffer.Po
include ./$(DEPDIR)/RageSoundPosMap.Po
include ./$(DEPDIR)/RageSoundReader_Chain.Po
include ./$(DEPDIR)/RageSoundReader_FileReader.Po
include ./$(DEPDIR)/RageSoundReader_MP3.Po
include ./$(DEPDIR)/RageSoundReader_Preload.Po
include ./$(DEPDIR)/RageSoundReader_Resample.Po
include ./$(DEPDIR)/RageSoundReader_Resample_Fast.Po
include ./$(DEPDIR)/RageSoundReader_Resample_Good.Po
include ./$(DEPDIR)/RageSoundReader_Vorbisfile.Po
include ./$(DEPDIR)/RageSoundReader_WAV.Po
include ./$(DEPDIR)/RageSoundResampler.Po
include ./$(DEPDIR)/RageSoundUtil.Po
include ./$(DEPDIR)/RageSurface.Po
include ./$(DEPDIR)/RageSurfaceUtils.Po
include ./$(DEPDIR)/RageSurfaceUtils_Dither.Po
include ./$(DEPDIR)/RageSurfaceUtils_Palettize.Po
include ./$(DEPDIR)/RageSurfaceUtils_Zoom.Po
include ./$(DEPDIR)/RageSurface_Load.Po
include ./$(DEPDIR)/RageSurface_Load_BMP.Po
include ./$(DEPDIR)/RageSurface_Load_GIF.Po
include ./$(DEPDIR)/RageSurface_Load_JPEG.Po
include ./$(DEPDIR)/RageSurface_Load_PNG.Po
include ./$(DEPDIR)/RageSurface_Load_XPM.Po
include ./$(DEPDIR)/RageSurface_Save_BMP.Po
include ./$(DEPDIR)/RageSurface_Save_JPEG.Po
include ./$(DEPDIR)/RageTexture.Po
include ./$(DEPDIR)/RageTextureID.Po
include ./$(DEPDIR)/RageTextureManager.Po
include ./$(DEPDIR)/RageThreads.Po
include ./$(DEPDIR)/RageTimer.Po
include ./$(DEPDIR)/RageUtil.Po
include ./$(DEPDIR)/RageUtil_BackgroundLoader.Po
include ./$(DEPDIR)/RageUtil_CharConversions.Po
include ./$(DEPDIR)/RageUtil_FileDB.Po
include ./$(DEPDIR)/RageUtil_WorkerThread.Po
include ./$(DEPDIR)/RandomSample.Po
include ./$(DEPDIR)/ReceptorArrow.Po
include ./$(DEPDIR)/ReceptorArrowRow.Po
include ./$(DEPDIR)/RollingNumbers.Po
include ./$(DEPDIR)/RoomWheel.Po
include ./$(DEPDIR)/RunningUnderValgrind.Po
include ./$(DEPDIR)/SDL_utils.Po
include ./$(DEPDIR)/ScoreDisplay.Po
include ./$(DEPDIR)/ScoreDisplayBattle.Po
include ./$(DEPDIR)/ScoreDisplayCalories.Po
include ./$(DEPDIR)/ScoreDisplayLifeTime.Po
include ./$(DEPDIR)/ScoreDisplayNormal.Po
include ./$(DEPDIR)/ScoreDisplayOni.Po
include ./$(DEPDIR)/ScoreDisplayPercentage.Po
include ./$(DEPDIR)/ScoreDisplayRave.Po
include ./$(DEPDIR)/ScoreKeeperMAX2.Po
include ./$(DEPDIR)/ScoreKeeperRave.Po
include ./$(DEPDIR)/Screen.Po
include ./$(DEPDIR)/ScreenAttract.Po
include ./$(DEPDIR)/ScreenBookkeeping.Po
include ./$(DEPDIR)/ScreenBranch.Po
include ./$(DEPDIR)/ScreenCenterImage.Po
include ./$(DEPDIR)/ScreenCredits.Po
include ./$(DEPDIR)/ScreenDebugOverlay.Po
include ./$(DEPDIR)/ScreenDemonstration.Po
include ./$(DEPDIR)/ScreenDimensions.Po
include ./$(DEPDIR)/ScreenEdit.Po
include ./$(DEPDIR)/ScreenEditCoursesMenu.Po
include ./$(DEPDIR)/ScreenEditMenu.Po
include ./$(DEPDIR)/ScreenEnding.Po
include ./$(DEPDIR)/ScreenEndlessBreak.Po
include ./$(DEPDIR)/ScreenEvaluation.Po
include ./$(DEPDIR)/ScreenExit.Po
include ./$(DEPDIR)/ScreenEz2SelectMusic.Po
include ./$(DEPDIR)/ScreenEz2SelectPlayer.Po
include ./$(DEPDIR)/ScreenGameplay.Po
include ./$(DEPDIR)/ScreenGameplayMultiplayer.Po
include ./$(DEPDIR)/ScreenHowToPlay.Po
include ./$(DEPDIR)/ScreenInstructions.Po
include ./$(DEPDIR)/ScreenJukebox.Po
include ./$(DEPDIR)/ScreenLogo.Po
include ./$(DEPDIR)/ScreenManager.Po
include ./$(DEPDIR)/ScreenMapControllers.Po
include ./$(DEPDIR)/ScreenMessage.Po
include ./$(DEPDIR)/ScreenMiniMenu.Po
include ./$(DEPDIR)/ScreenMusicScroll.Po
include ./$(DEPDIR)/ScreenNameEntry.Po
include ./$(DEPDIR)/ScreenNameEntryTraditional.Po
include ./$(DEPDIR)/ScreenNetEvaluation.Po
include ./$(DEPDIR)/ScreenNetRoom.Po
include ./$(DEPDIR)/ScreenNetSelectBase.Po
include ./$(DEPDIR)/ScreenNetSelectMusic.Po
include ./$(DEPDIR)/ScreenNetworkOptions.Po
include ./$(DEPDIR)/ScreenOptions.Po
include ./$(DEPDIR)/ScreenOptionsMaster.Po
include ./$(DEPDIR)/ScreenOptionsMasterPrefs.Po
include ./$(DEPDIR)/ScreenPackages.Po
include ./$(DEPDIR)/ScreenPlayerOptions.Po
include ./$(DEPDIR)/ScreenProfileOptions.Po
include ./$(DEPDIR)/ScreenPrompt.Po
include ./$(DEPDIR)/ScreenRanking.Po
include ./$(DEPDIR)/ScreenReloadSongs.Po
include ./$(DEPDIR)/ScreenSMOnlineLogin.Po
include ./$(DEPDIR)/ScreenSandbox.Po
include ./$(DEPDIR)/ScreenSaveSync.Po
include ./$(DEPDIR)/ScreenSelect.Po
include ./$(DEPDIR)/ScreenSelectCharacter.Po
include ./$(DEPDIR)/ScreenSelectDifficulty.Po
include ./$(DEPDIR)/ScreenSelectGroup.Po
include ./$(DEPDIR)/ScreenSelectMaster.Po
include ./$(DEPDIR)/ScreenSelectMode.Po
include ./$(DEPDIR)/ScreenSelectMusic.Po
include ./$(DEPDIR)/ScreenSelectStyle.Po
include ./$(DEPDIR)/ScreenSetTime.Po
include ./$(DEPDIR)/ScreenSongOptions.Po
include ./$(DEPDIR)/ScreenSplash.Po
include ./$(DEPDIR)/ScreenStage.Po
include ./$(DEPDIR)/ScreenSyncOverlay.Po
include ./$(DEPDIR)/ScreenSystemLayer.Po
include ./$(DEPDIR)/ScreenTest.Po
include ./$(DEPDIR)/ScreenTestFonts.Po
include ./$(DEPDIR)/ScreenTestInput.Po
include ./$(DEPDIR)/ScreenTestLights.Po
include ./$(DEPDIR)/ScreenTestSound.Po
include ./$(DEPDIR)/ScreenTextEntry.Po
include ./$(DEPDIR)/ScreenTitleMenu.Po
include ./$(DEPDIR)/ScreenUnlock.Po
include ./$(DEPDIR)/ScreenWithMenuElements.Po
include ./$(DEPDIR)/ScrollBar.Po
include ./$(DEPDIR)/ScrollingList.Po
include ./$(DEPDIR)/SignalHandler.Po
include ./$(DEPDIR)/SnapDisplay.Po
include ./$(DEPDIR)/Song.Po
include ./$(DEPDIR)/SongCacheIndex.Po
include ./$(DEPDIR)/SongManager.Po
include ./$(DEPDIR)/SongOptions.Po
include ./$(DEPDIR)/SongUtil.Po
include ./$(DEPDIR)/Sprite.Po
include ./$(DEPDIR)/StageStats.Po
include ./$(DEPDIR)/StatsManager.Po
include ./$(DEPDIR)/StepMania.Po
include ./$(DEPDIR)/Steps.Po
include ./$(DEPDIR)/StepsUtil.Po
include ./$(DEPDIR)/StreamDisplay.Po
include ./$(DEPDIR)/Style.Po
include ./$(DEPDIR)/StyleUtil.Po
include ./$(DEPDIR)/TextBanner.Po
include ./$(DEPDIR)/ThemeManager.Po
include ./$(DEPDIR)/Threads_Pthreads.Po
include ./$(DEPDIR)/TimingData.Po
include ./$(DEPDIR)/TitleSubstitution.Po
include ./$(DEPDIR)/Trail.Po
include ./$(DEPDIR)/TrailUtil.Po
include ./$(DEPDIR)/Transition.Po
include ./$(DEPDIR)/UnlockManager.Po
include ./$(DEPDIR)/WheelBase.Po
include ./$(DEPDIR)/WheelItemBase.Po
include ./$(DEPDIR)/WheelNotifyIcon.Po
include ./$(DEPDIR)/X11Helper.Po
include ./$(DEPDIR)/XmlFile.Po
include ./$(DEPDIR)/algebra.Po
include ./$(DEPDIR)/algparam.Po
include ./$(DEPDIR)/arch.Po
include ./$(DEPDIR)/asn.Po
include ./$(DEPDIR)/chartables.Po
include ./$(DEPDIR)/cryptlib.Po
include ./$(DEPDIR)/ezsockets.Po
include ./$(DEPDIR)/files.Po
include ./$(DEPDIR)/filters.Po
include ./$(DEPDIR)/get.Po
include ./$(DEPDIR)/global.Po
include ./$(DEPDIR)/integer.Po
include ./$(DEPDIR)/iterhash.Po
include ./$(DEPDIR)/maketables.Po
include ./$(DEPDIR)/misc.Po
include ./$(DEPDIR)/mqueue.Po
include ./$(DEPDIR)/nbtheory.Po
include ./$(DEPDIR)/osrng.Po
include ./$(DEPDIR)/pcre.Po
include ./$(DEPDIR)/pkcspad.Po
include ./$(DEPDIR)/pubkey.Po
include ./$(DEPDIR)/queue.Po
include ./$(DEPDIR)/rsa.Po
include ./$(DEPDIR)/sha.Po
include ./$(DEPDIR)/study.Po
include ./$(DEPDIR)/test_audio_readers.Po
include ./$(DEPDIR)/test_file_errors.Po
include ./$(DEPDIR)/test_file_readers.Po
include ./$(DEPDIR)/test_misc.Po
include ./$(DEPDIR)/test_threads.Po
include ./$(DEPDIR)/test_timing_data.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

chartables.o: pcre/chartables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT chartables.o -MD -MP -MF "$(DEPDIR)/chartables.Tpo" -c -o chartables.o `test -f 'pcre/chartables.c' || echo '$(srcdir)/'`pcre/chartables.c; \
	then mv -f "$(DEPDIR)/chartables.Tpo" "$(DEPDIR)/chartables.Po"; else rm -f "$(DEPDIR)/chartables.Tpo"; exit 1; fi
#	source='pcre/chartables.c' object='chartables.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chartables.o `test -f 'pcre/chartables.c' || echo '$(srcdir)/'`pcre/chartables.c

chartables.obj: pcre/chartables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT chartables.obj -MD -MP -MF "$(DEPDIR)/chartables.Tpo" -c -o chartables.obj `if test -f 'pcre/chartables.c'; then $(CYGPATH_W) 'pcre/chartables.c'; else $(CYGPATH_W) '$(srcdir)/pcre/chartables.c'; fi`; \
	then mv -f "$(DEPDIR)/chartables.Tpo" "$(DEPDIR)/chartables.Po"; else rm -f "$(DEPDIR)/chartables.Tpo"; exit 1; fi
#	source='pcre/chartables.c' object='chartables.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o chartables.obj `if test -f 'pcre/chartables.c'; then $(CYGPATH_W) 'pcre/chartables.c'; else $(CYGPATH_W) '$(srcdir)/pcre/chartables.c'; fi`

get.o: pcre/get.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get.o -MD -MP -MF "$(DEPDIR)/get.Tpo" -c -o get.o `test -f 'pcre/get.c' || echo '$(srcdir)/'`pcre/get.c; \
	then mv -f "$(DEPDIR)/get.Tpo" "$(DEPDIR)/get.Po"; else rm -f "$(DEPDIR)/get.Tpo"; exit 1; fi
#	source='pcre/get.c' object='get.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get.o `test -f 'pcre/get.c' || echo '$(srcdir)/'`pcre/get.c

get.obj: pcre/get.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT get.obj -MD -MP -MF "$(DEPDIR)/get.Tpo" -c -o get.obj `if test -f 'pcre/get.c'; then $(CYGPATH_W) 'pcre/get.c'; else $(CYGPATH_W) '$(srcdir)/pcre/get.c'; fi`; \
	then mv -f "$(DEPDIR)/get.Tpo" "$(DEPDIR)/get.Po"; else rm -f "$(DEPDIR)/get.Tpo"; exit 1; fi
#	source='pcre/get.c' object='get.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o get.obj `if test -f 'pcre/get.c'; then $(CYGPATH_W) 'pcre/get.c'; else $(CYGPATH_W) '$(srcdir)/pcre/get.c'; fi`

maketables.o: pcre/maketables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT maketables.o -MD -MP -MF "$(DEPDIR)/maketables.Tpo" -c -o maketables.o `test -f 'pcre/maketables.c' || echo '$(srcdir)/'`pcre/maketables.c; \
	then mv -f "$(DEPDIR)/maketables.Tpo" "$(DEPDIR)/maketables.Po"; else rm -f "$(DEPDIR)/maketables.Tpo"; exit 1; fi
#	source='pcre/maketables.c' object='maketables.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o maketables.o `test -f 'pcre/maketables.c' || echo '$(srcdir)/'`pcre/maketables.c

maketables.obj: pcre/maketables.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT maketables.obj -MD -MP -MF "$(DEPDIR)/maketables.Tpo" -c -o maketables.obj `if test -f 'pcre/maketables.c'; then $(CYGPATH_W) 'pcre/maketables.c'; else $(CYGPATH_W) '$(srcdir)/pcre/maketables.c'; fi`; \
	then mv -f "$(DEPDIR)/maketables.Tpo" "$(DEPDIR)/maketables.Po"; else rm -f "$(DEPDIR)/maketables.Tpo"; exit 1; fi
#	source='pcre/maketables.c' object='maketables.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o maketables.obj `if test -f 'pcre/maketables.c'; then $(CYGPATH_W) 'pcre/maketables.c'; else $(CYGPATH_W) '$(srcdir)/pcre/maketables.c'; fi`

pcre.o: pcre/pcre.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pcre.o -MD -MP -MF "$(DEPDIR)/pcre.Tpo" -c -o pcre.o `test -f 'pcre/pcre.c' || echo '$(srcdir)/'`pcre/pcre.c; \
	then mv -f "$(DEPDIR)/pcre.Tpo" "$(DEPDIR)/pcre.Po"; else rm -f "$(DEPDIR)/pcre.Tpo"; exit 1; fi
#	source='pcre/pcre.c' object='pcre.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pcre.o `test -f 'pcre/pcre.c' || echo '$(srcdir)/'`pcre/pcre.c

pcre.obj: pcre/pcre.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT pcre.obj -MD -MP -MF "$(DEPDIR)/pcre.Tpo" -c -o pcre.obj `if test -f 'pcre/pcre.c'; then $(CYGPATH_W) 'pcre/pcre.c'; else $(CYGPATH_W) '$(srcdir)/pcre/pcre.c'; fi`; \
	then mv -f "$(DEPDIR)/pcre.Tpo" "$(DEPDIR)/pcre.Po"; else rm -f "$(DEPDIR)/pcre.Tpo"; exit 1; fi
#	source='pcre/pcre.c' object='pcre.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pcre.obj `if test -f 'pcre/pcre.c'; then $(CYGPATH_W) 'pcre/pcre.c'; else $(CYGPATH_W) '$(srcdir)/pcre/pcre.c'; fi`

study.o: pcre/study.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT study.o -MD -MP -MF "$(DEPDIR)/study.Tpo" -c -o study.o `test -f 'pcre/study.c' || echo '$(srcdir)/'`pcre/study.c; \
	then mv -f "$(DEPDIR)/study.Tpo" "$(DEPDIR)/study.Po"; else rm -f "$(DEPDIR)/study.Tpo"; exit 1; fi
#	source='pcre/study.c' object='study.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o study.o `test -f 'pcre/study.c' || echo '$(srcdir)/'`pcre/study.c

study.obj: pcre/study.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT study.obj -MD -MP -MF "$(DEPDIR)/study.Tpo" -c -o study.obj `if test -f 'pcre/study.c'; then $(CYGPATH_W) 'pcre/study.c'; else $(CYGPATH_W) '$(srcdir)/pcre/study.c'; fi`; \
	then mv -f "$(DEPDIR)/study.Tpo" "$(DEPDIR)/study.Po"; else rm -f "$(DEPDIR)/study.Tpo"; exit 1; fi
#	source='pcre/study.c' object='study.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o study.obj `if test -f 'pcre/study.c'; then $(CYGPATH_W) 'pcre/study.c'; else $(CYGPATH_W) '$(srcdir)/pcre/study.c'; fi`

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

GtkModule_so-LoadingWindow_GtkModule.o: arch/LoadingWindow/LoadingWindow_GtkModule.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(GtkModule_so_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GtkModule_so-LoadingWindow_GtkModule.o -MD -MP -MF "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo" -c -o GtkModule_so-LoadingWindow_GtkModule.o `test -f 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_GtkModule.cpp; \
	then mv -f "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo" "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Po"; else rm -f "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_GtkModule.cpp' object='GtkModule_so-LoadingWindow_GtkModule.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(GtkModule_so_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GtkModule_so-LoadingWindow_GtkModule.o `test -f 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_GtkModule.cpp

GtkModule_so-LoadingWindow_GtkModule.obj: arch/LoadingWindow/LoadingWindow_GtkModule.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(GtkModule_so_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GtkModule_so-LoadingWindow_GtkModule.obj -MD -MP -MF "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo" -c -o GtkModule_so-LoadingWindow_GtkModule.obj `if test -f 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo" "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Po"; else rm -f "$(DEPDIR)/GtkModule_so-LoadingWindow_GtkModule.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_GtkModule.cpp' object='GtkModule_so-LoadingWindow_GtkModule.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(GtkModule_so_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GtkModule_so-LoadingWindow_GtkModule.obj `if test -f 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_GtkModule.cpp'; fi`

LoadingWindow_Gtk.o: arch/LoadingWindow/LoadingWindow_Gtk.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadingWindow_Gtk.o -MD -MP -MF "$(DEPDIR)/LoadingWindow_Gtk.Tpo" -c -o LoadingWindow_Gtk.o `test -f 'arch/LoadingWindow/LoadingWindow_Gtk.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_Gtk.cpp; \
	then mv -f "$(DEPDIR)/LoadingWindow_Gtk.Tpo" "$(DEPDIR)/LoadingWindow_Gtk.Po"; else rm -f "$(DEPDIR)/LoadingWindow_Gtk.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_Gtk.cpp' object='LoadingWindow_Gtk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadingWindow_Gtk.o `test -f 'arch/LoadingWindow/LoadingWindow_Gtk.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_Gtk.cpp

LoadingWindow_Gtk.obj: arch/LoadingWindow/LoadingWindow_Gtk.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadingWindow_Gtk.obj -MD -MP -MF "$(DEPDIR)/LoadingWindow_Gtk.Tpo" -c -o LoadingWindow_Gtk.obj `if test -f 'arch/LoadingWindow/LoadingWindow_Gtk.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_Gtk.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_Gtk.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LoadingWindow_Gtk.Tpo" "$(DEPDIR)/LoadingWindow_Gtk.Po"; else rm -f "$(DEPDIR)/LoadingWindow_Gtk.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_Gtk.cpp' object='LoadingWindow_Gtk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadingWindow_Gtk.obj `if test -f 'arch/LoadingWindow/LoadingWindow_Gtk.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_Gtk.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_Gtk.cpp'; fi`

LoadingWindow_SDL.o: arch/LoadingWindow/LoadingWindow_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadingWindow_SDL.o -MD -MP -MF "$(DEPDIR)/LoadingWindow_SDL.Tpo" -c -o LoadingWindow_SDL.o `test -f 'arch/LoadingWindow/LoadingWindow_SDL.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_SDL.cpp; \
	then mv -f "$(DEPDIR)/LoadingWindow_SDL.Tpo" "$(DEPDIR)/LoadingWindow_SDL.Po"; else rm -f "$(DEPDIR)/LoadingWindow_SDL.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_SDL.cpp' object='LoadingWindow_SDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadingWindow_SDL.o `test -f 'arch/LoadingWindow/LoadingWindow_SDL.cpp' || echo '$(srcdir)/'`arch/LoadingWindow/LoadingWindow_SDL.cpp

LoadingWindow_SDL.obj: arch/LoadingWindow/LoadingWindow_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LoadingWindow_SDL.obj -MD -MP -MF "$(DEPDIR)/LoadingWindow_SDL.Tpo" -c -o LoadingWindow_SDL.obj `if test -f 'arch/LoadingWindow/LoadingWindow_SDL.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_SDL.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LoadingWindow_SDL.Tpo" "$(DEPDIR)/LoadingWindow_SDL.Po"; else rm -f "$(DEPDIR)/LoadingWindow_SDL.Tpo"; exit 1; fi
#	source='arch/LoadingWindow/LoadingWindow_SDL.cpp' object='LoadingWindow_SDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LoadingWindow_SDL.obj `if test -f 'arch/LoadingWindow/LoadingWindow_SDL.cpp'; then $(CYGPATH_W) 'arch/LoadingWindow/LoadingWindow_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LoadingWindow/LoadingWindow_SDL.cpp'; fi`

RageSoundDriver_Null.o: arch/Sound/RageSoundDriver_Null.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_Null.o -MD -MP -MF "$(DEPDIR)/RageSoundDriver_Null.Tpo" -c -o RageSoundDriver_Null.o `test -f 'arch/Sound/RageSoundDriver_Null.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_Null.cpp; \
	then mv -f "$(DEPDIR)/RageSoundDriver_Null.Tpo" "$(DEPDIR)/RageSoundDriver_Null.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_Null.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_Null.cpp' object='RageSoundDriver_Null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_Null.o `test -f 'arch/Sound/RageSoundDriver_Null.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_Null.cpp

RageSoundDriver_Null.obj: arch/Sound/RageSoundDriver_Null.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_Null.obj -MD -MP -MF "$(DEPDIR)/RageSoundDriver_Null.Tpo" -c -o RageSoundDriver_Null.obj `if test -f 'arch/Sound/RageSoundDriver_Null.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_Null.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_Null.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RageSoundDriver_Null.Tpo" "$(DEPDIR)/RageSoundDriver_Null.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_Null.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_Null.cpp' object='RageSoundDriver_Null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_Null.obj `if test -f 'arch/Sound/RageSoundDriver_Null.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_Null.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_Null.cpp'; fi`

RageSoundDriver_Generic_Software.o: arch/Sound/RageSoundDriver_Generic_Software.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_Generic_Software.o -MD -MP -MF "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo" -c -o RageSoundDriver_Generic_Software.o `test -f 'arch/Sound/RageSoundDriver_Generic_Software.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_Generic_Software.cpp; \
	then mv -f "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo" "$(DEPDIR)/RageSoundDriver_Generic_Software.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_Generic_Software.cpp' object='RageSoundDriver_Generic_Software.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_Generic_Software.o `test -f 'arch/Sound/RageSoundDriver_Generic_Software.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_Generic_Software.cpp

RageSoundDriver_Generic_Software.obj: arch/Sound/RageSoundDriver_Generic_Software.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_Generic_Software.obj -MD -MP -MF "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo" -c -o RageSoundDriver_Generic_Software.obj `if test -f 'arch/Sound/RageSoundDriver_Generic_Software.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_Generic_Software.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_Generic_Software.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo" "$(DEPDIR)/RageSoundDriver_Generic_Software.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_Generic_Software.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_Generic_Software.cpp' object='RageSoundDriver_Generic_Software.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_Generic_Software.obj `if test -f 'arch/Sound/RageSoundDriver_Generic_Software.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_Generic_Software.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_Generic_Software.cpp'; fi`

RageSoundDriver_OSS.o: arch/Sound/RageSoundDriver_OSS.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_OSS.o -MD -MP -MF "$(DEPDIR)/RageSoundDriver_OSS.Tpo" -c -o RageSoundDriver_OSS.o `test -f 'arch/Sound/RageSoundDriver_OSS.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_OSS.cpp; \
	then mv -f "$(DEPDIR)/RageSoundDriver_OSS.Tpo" "$(DEPDIR)/RageSoundDriver_OSS.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_OSS.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_OSS.cpp' object='RageSoundDriver_OSS.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_OSS.o `test -f 'arch/Sound/RageSoundDriver_OSS.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_OSS.cpp

RageSoundDriver_OSS.obj: arch/Sound/RageSoundDriver_OSS.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_OSS.obj -MD -MP -MF "$(DEPDIR)/RageSoundDriver_OSS.Tpo" -c -o RageSoundDriver_OSS.obj `if test -f 'arch/Sound/RageSoundDriver_OSS.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_OSS.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_OSS.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RageSoundDriver_OSS.Tpo" "$(DEPDIR)/RageSoundDriver_OSS.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_OSS.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_OSS.cpp' object='RageSoundDriver_OSS.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_OSS.obj `if test -f 'arch/Sound/RageSoundDriver_OSS.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_OSS.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_OSS.cpp'; fi`

ALSA9Dynamic.o: arch/Sound/ALSA9Dynamic.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ALSA9Dynamic.o -MD -MP -MF "$(DEPDIR)/ALSA9Dynamic.Tpo" -c -o ALSA9Dynamic.o `test -f 'arch/Sound/ALSA9Dynamic.cpp' || echo '$(srcdir)/'`arch/Sound/ALSA9Dynamic.cpp; \
	then mv -f "$(DEPDIR)/ALSA9Dynamic.Tpo" "$(DEPDIR)/ALSA9Dynamic.Po"; else rm -f "$(DEPDIR)/ALSA9Dynamic.Tpo"; exit 1; fi
#	source='arch/Sound/ALSA9Dynamic.cpp' object='ALSA9Dynamic.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ALSA9Dynamic.o `test -f 'arch/Sound/ALSA9Dynamic.cpp' || echo '$(srcdir)/'`arch/Sound/ALSA9Dynamic.cpp

ALSA9Dynamic.obj: arch/Sound/ALSA9Dynamic.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ALSA9Dynamic.obj -MD -MP -MF "$(DEPDIR)/ALSA9Dynamic.Tpo" -c -o ALSA9Dynamic.obj `if test -f 'arch/Sound/ALSA9Dynamic.cpp'; then $(CYGPATH_W) 'arch/Sound/ALSA9Dynamic.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/ALSA9Dynamic.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ALSA9Dynamic.Tpo" "$(DEPDIR)/ALSA9Dynamic.Po"; else rm -f "$(DEPDIR)/ALSA9Dynamic.Tpo"; exit 1; fi
#	source='arch/Sound/ALSA9Dynamic.cpp' object='ALSA9Dynamic.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ALSA9Dynamic.obj `if test -f 'arch/Sound/ALSA9Dynamic.cpp'; then $(CYGPATH_W) 'arch/Sound/ALSA9Dynamic.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/ALSA9Dynamic.cpp'; fi`

ALSA9Helpers.o: arch/Sound/ALSA9Helpers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ALSA9Helpers.o -MD -MP -MF "$(DEPDIR)/ALSA9Helpers.Tpo" -c -o ALSA9Helpers.o `test -f 'arch/Sound/ALSA9Helpers.cpp' || echo '$(srcdir)/'`arch/Sound/ALSA9Helpers.cpp; \
	then mv -f "$(DEPDIR)/ALSA9Helpers.Tpo" "$(DEPDIR)/ALSA9Helpers.Po"; else rm -f "$(DEPDIR)/ALSA9Helpers.Tpo"; exit 1; fi
#	source='arch/Sound/ALSA9Helpers.cpp' object='ALSA9Helpers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ALSA9Helpers.o `test -f 'arch/Sound/ALSA9Helpers.cpp' || echo '$(srcdir)/'`arch/Sound/ALSA9Helpers.cpp

ALSA9Helpers.obj: arch/Sound/ALSA9Helpers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ALSA9Helpers.obj -MD -MP -MF "$(DEPDIR)/ALSA9Helpers.Tpo" -c -o ALSA9Helpers.obj `if test -f 'arch/Sound/ALSA9Helpers.cpp'; then $(CYGPATH_W) 'arch/Sound/ALSA9Helpers.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/ALSA9Helpers.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ALSA9Helpers.Tpo" "$(DEPDIR)/ALSA9Helpers.Po"; else rm -f "$(DEPDIR)/ALSA9Helpers.Tpo"; exit 1; fi
#	source='arch/Sound/ALSA9Helpers.cpp' object='ALSA9Helpers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ALSA9Helpers.obj `if test -f 'arch/Sound/ALSA9Helpers.cpp'; then $(CYGPATH_W) 'arch/Sound/ALSA9Helpers.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/ALSA9Helpers.cpp'; fi`

RageSoundDriver_ALSA9.o: arch/Sound/RageSoundDriver_ALSA9.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_ALSA9.o -MD -MP -MF "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo" -c -o RageSoundDriver_ALSA9.o `test -f 'arch/Sound/RageSoundDriver_ALSA9.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_ALSA9.cpp; \
	then mv -f "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo" "$(DEPDIR)/RageSoundDriver_ALSA9.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_ALSA9.cpp' object='RageSoundDriver_ALSA9.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_ALSA9.o `test -f 'arch/Sound/RageSoundDriver_ALSA9.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_ALSA9.cpp

RageSoundDriver_ALSA9.obj: arch/Sound/RageSoundDriver_ALSA9.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_ALSA9.obj -MD -MP -MF "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo" -c -o RageSoundDriver_ALSA9.obj `if test -f 'arch/Sound/RageSoundDriver_ALSA9.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_ALSA9.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_ALSA9.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo" "$(DEPDIR)/RageSoundDriver_ALSA9.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_ALSA9.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_ALSA9.cpp' object='RageSoundDriver_ALSA9.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_ALSA9.obj `if test -f 'arch/Sound/RageSoundDriver_ALSA9.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_ALSA9.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_ALSA9.cpp'; fi`

RageSoundDriver_ALSA9_Software.o: arch/Sound/RageSoundDriver_ALSA9_Software.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_ALSA9_Software.o -MD -MP -MF "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo" -c -o RageSoundDriver_ALSA9_Software.o `test -f 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_ALSA9_Software.cpp; \
	then mv -f "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo" "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_ALSA9_Software.cpp' object='RageSoundDriver_ALSA9_Software.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_ALSA9_Software.o `test -f 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp' || echo '$(srcdir)/'`arch/Sound/RageSoundDriver_ALSA9_Software.cpp

RageSoundDriver_ALSA9_Software.obj: arch/Sound/RageSoundDriver_ALSA9_Software.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RageSoundDriver_ALSA9_Software.obj -MD -MP -MF "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo" -c -o RageSoundDriver_ALSA9_Software.obj `if test -f 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo" "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Po"; else rm -f "$(DEPDIR)/RageSoundDriver_ALSA9_Software.Tpo"; exit 1; fi
#	source='arch/Sound/RageSoundDriver_ALSA9_Software.cpp' object='RageSoundDriver_ALSA9_Software.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RageSoundDriver_ALSA9_Software.obj `if test -f 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; then $(CYGPATH_W) 'arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Sound/RageSoundDriver_ALSA9_Software.cpp'; fi`

ArchHooks.o: arch/ArchHooks/ArchHooks.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ArchHooks.o -MD -MP -MF "$(DEPDIR)/ArchHooks.Tpo" -c -o ArchHooks.o `test -f 'arch/ArchHooks/ArchHooks.cpp' || echo '$(srcdir)/'`arch/ArchHooks/ArchHooks.cpp; \
	then mv -f "$(DEPDIR)/ArchHooks.Tpo" "$(DEPDIR)/ArchHooks.Po"; else rm -f "$(DEPDIR)/ArchHooks.Tpo"; exit 1; fi
#	source='arch/ArchHooks/ArchHooks.cpp' object='ArchHooks.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ArchHooks.o `test -f 'arch/ArchHooks/ArchHooks.cpp' || echo '$(srcdir)/'`arch/ArchHooks/ArchHooks.cpp

ArchHooks.obj: arch/ArchHooks/ArchHooks.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ArchHooks.obj -MD -MP -MF "$(DEPDIR)/ArchHooks.Tpo" -c -o ArchHooks.obj `if test -f 'arch/ArchHooks/ArchHooks.cpp'; then $(CYGPATH_W) 'arch/ArchHooks/ArchHooks.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/ArchHooks/ArchHooks.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ArchHooks.Tpo" "$(DEPDIR)/ArchHooks.Po"; else rm -f "$(DEPDIR)/ArchHooks.Tpo"; exit 1; fi
#	source='arch/ArchHooks/ArchHooks.cpp' object='ArchHooks.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ArchHooks.obj `if test -f 'arch/ArchHooks/ArchHooks.cpp'; then $(CYGPATH_W) 'arch/ArchHooks/ArchHooks.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/ArchHooks/ArchHooks.cpp'; fi`

ArchHooks_Unix.o: arch/ArchHooks/ArchHooks_Unix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ArchHooks_Unix.o -MD -MP -MF "$(DEPDIR)/ArchHooks_Unix.Tpo" -c -o ArchHooks_Unix.o `test -f 'arch/ArchHooks/ArchHooks_Unix.cpp' || echo '$(srcdir)/'`arch/ArchHooks/ArchHooks_Unix.cpp; \
	then mv -f "$(DEPDIR)/ArchHooks_Unix.Tpo" "$(DEPDIR)/ArchHooks_Unix.Po"; else rm -f "$(DEPDIR)/ArchHooks_Unix.Tpo"; exit 1; fi
#	source='arch/ArchHooks/ArchHooks_Unix.cpp' object='ArchHooks_Unix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ArchHooks_Unix.o `test -f 'arch/ArchHooks/ArchHooks_Unix.cpp' || echo '$(srcdir)/'`arch/ArchHooks/ArchHooks_Unix.cpp

ArchHooks_Unix.obj: arch/ArchHooks/ArchHooks_Unix.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ArchHooks_Unix.obj -MD -MP -MF "$(DEPDIR)/ArchHooks_Unix.Tpo" -c -o ArchHooks_Unix.obj `if test -f 'arch/ArchHooks/ArchHooks_Unix.cpp'; then $(CYGPATH_W) 'arch/ArchHooks/ArchHooks_Unix.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/ArchHooks/ArchHooks_Unix.cpp'; fi`; \
	then mv -f "$(DEPDIR)/ArchHooks_Unix.Tpo" "$(DEPDIR)/ArchHooks_Unix.Po"; else rm -f "$(DEPDIR)/ArchHooks_Unix.Tpo"; exit 1; fi
#	source='arch/ArchHooks/ArchHooks_Unix.cpp' object='ArchHooks_Unix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ArchHooks_Unix.obj `if test -f 'arch/ArchHooks/ArchHooks_Unix.cpp'; then $(CYGPATH_W) 'arch/ArchHooks/ArchHooks_Unix.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/ArchHooks/ArchHooks_Unix.cpp'; fi`

InputHandler.o: arch/InputHandler/InputHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler.o -MD -MP -MF "$(DEPDIR)/InputHandler.Tpo" -c -o InputHandler.o `test -f 'arch/InputHandler/InputHandler.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler.cpp; \
	then mv -f "$(DEPDIR)/InputHandler.Tpo" "$(DEPDIR)/InputHandler.Po"; else rm -f "$(DEPDIR)/InputHandler.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler.cpp' object='InputHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler.o `test -f 'arch/InputHandler/InputHandler.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler.cpp

InputHandler.obj: arch/InputHandler/InputHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler.obj -MD -MP -MF "$(DEPDIR)/InputHandler.Tpo" -c -o InputHandler.obj `if test -f 'arch/InputHandler/InputHandler.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputHandler.Tpo" "$(DEPDIR)/InputHandler.Po"; else rm -f "$(DEPDIR)/InputHandler.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler.cpp' object='InputHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler.obj `if test -f 'arch/InputHandler/InputHandler.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler.cpp'; fi`

InputHandler_MonkeyKeyboard.o: arch/InputHandler/InputHandler_MonkeyKeyboard.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_MonkeyKeyboard.o -MD -MP -MF "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo" -c -o InputHandler_MonkeyKeyboard.o `test -f 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_MonkeyKeyboard.cpp; \
	then mv -f "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo" "$(DEPDIR)/InputHandler_MonkeyKeyboard.Po"; else rm -f "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_MonkeyKeyboard.cpp' object='InputHandler_MonkeyKeyboard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_MonkeyKeyboard.o `test -f 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_MonkeyKeyboard.cpp

InputHandler_MonkeyKeyboard.obj: arch/InputHandler/InputHandler_MonkeyKeyboard.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_MonkeyKeyboard.obj -MD -MP -MF "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo" -c -o InputHandler_MonkeyKeyboard.obj `if test -f 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo" "$(DEPDIR)/InputHandler_MonkeyKeyboard.Po"; else rm -f "$(DEPDIR)/InputHandler_MonkeyKeyboard.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_MonkeyKeyboard.cpp' object='InputHandler_MonkeyKeyboard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_MonkeyKeyboard.obj `if test -f 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_MonkeyKeyboard.cpp'; fi`

InputHandler_SDL.o: arch/InputHandler/InputHandler_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_SDL.o -MD -MP -MF "$(DEPDIR)/InputHandler_SDL.Tpo" -c -o InputHandler_SDL.o `test -f 'arch/InputHandler/InputHandler_SDL.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_SDL.cpp; \
	then mv -f "$(DEPDIR)/InputHandler_SDL.Tpo" "$(DEPDIR)/InputHandler_SDL.Po"; else rm -f "$(DEPDIR)/InputHandler_SDL.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_SDL.cpp' object='InputHandler_SDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_SDL.o `test -f 'arch/InputHandler/InputHandler_SDL.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_SDL.cpp

InputHandler_SDL.obj: arch/InputHandler/InputHandler_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_SDL.obj -MD -MP -MF "$(DEPDIR)/InputHandler_SDL.Tpo" -c -o InputHandler_SDL.obj `if test -f 'arch/InputHandler/InputHandler_SDL.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_SDL.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputHandler_SDL.Tpo" "$(DEPDIR)/InputHandler_SDL.Po"; else rm -f "$(DEPDIR)/InputHandler_SDL.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_SDL.cpp' object='InputHandler_SDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_SDL.obj `if test -f 'arch/InputHandler/InputHandler_SDL.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_SDL.cpp'; fi`

InputHandler_X11.o: arch/InputHandler/InputHandler_X11.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_X11.o -MD -MP -MF "$(DEPDIR)/InputHandler_X11.Tpo" -c -o InputHandler_X11.o `test -f 'arch/InputHandler/InputHandler_X11.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_X11.cpp; \
	then mv -f "$(DEPDIR)/InputHandler_X11.Tpo" "$(DEPDIR)/InputHandler_X11.Po"; else rm -f "$(DEPDIR)/InputHandler_X11.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_X11.cpp' object='InputHandler_X11.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_X11.o `test -f 'arch/InputHandler/InputHandler_X11.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_X11.cpp

InputHandler_X11.obj: arch/InputHandler/InputHandler_X11.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_X11.obj -MD -MP -MF "$(DEPDIR)/InputHandler_X11.Tpo" -c -o InputHandler_X11.obj `if test -f 'arch/InputHandler/InputHandler_X11.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_X11.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_X11.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputHandler_X11.Tpo" "$(DEPDIR)/InputHandler_X11.Po"; else rm -f "$(DEPDIR)/InputHandler_X11.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_X11.cpp' object='InputHandler_X11.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_X11.obj `if test -f 'arch/InputHandler/InputHandler_X11.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_X11.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_X11.cpp'; fi`

InputHandler_Linux_Joystick.o: arch/InputHandler/InputHandler_Linux_Joystick.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_Linux_Joystick.o -MD -MP -MF "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo" -c -o InputHandler_Linux_Joystick.o `test -f 'arch/InputHandler/InputHandler_Linux_Joystick.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_Linux_Joystick.cpp; \
	then mv -f "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo" "$(DEPDIR)/InputHandler_Linux_Joystick.Po"; else rm -f "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_Linux_Joystick.cpp' object='InputHandler_Linux_Joystick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_Linux_Joystick.o `test -f 'arch/InputHandler/InputHandler_Linux_Joystick.cpp' || echo '$(srcdir)/'`arch/InputHandler/InputHandler_Linux_Joystick.cpp

InputHandler_Linux_Joystick.obj: arch/InputHandler/InputHandler_Linux_Joystick.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT InputHandler_Linux_Joystick.obj -MD -MP -MF "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo" -c -o InputHandler_Linux_Joystick.obj `if test -f 'arch/InputHandler/InputHandler_Linux_Joystick.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_Linux_Joystick.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_Linux_Joystick.cpp'; fi`; \
	then mv -f "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo" "$(DEPDIR)/InputHandler_Linux_Joystick.Po"; else rm -f "$(DEPDIR)/InputHandler_Linux_Joystick.Tpo"; exit 1; fi
#	source='arch/InputHandler/InputHandler_Linux_Joystick.cpp' object='InputHandler_Linux_Joystick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o InputHandler_Linux_Joystick.obj `if test -f 'arch/InputHandler/InputHandler_Linux_Joystick.cpp'; then $(CYGPATH_W) 'arch/InputHandler/InputHandler_Linux_Joystick.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/InputHandler/InputHandler_Linux_Joystick.cpp'; fi`

MovieTexture.o: arch/MovieTexture/MovieTexture.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture.o -MD -MP -MF "$(DEPDIR)/MovieTexture.Tpo" -c -o MovieTexture.o `test -f 'arch/MovieTexture/MovieTexture.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture.cpp; \
	then mv -f "$(DEPDIR)/MovieTexture.Tpo" "$(DEPDIR)/MovieTexture.Po"; else rm -f "$(DEPDIR)/MovieTexture.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture.cpp' object='MovieTexture.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture.o `test -f 'arch/MovieTexture/MovieTexture.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture.cpp

MovieTexture.obj: arch/MovieTexture/MovieTexture.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture.obj -MD -MP -MF "$(DEPDIR)/MovieTexture.Tpo" -c -o MovieTexture.obj `if test -f 'arch/MovieTexture/MovieTexture.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MovieTexture.Tpo" "$(DEPDIR)/MovieTexture.Po"; else rm -f "$(DEPDIR)/MovieTexture.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture.cpp' object='MovieTexture.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture.obj `if test -f 'arch/MovieTexture/MovieTexture.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture.cpp'; fi`

MovieTexture_Null.o: arch/MovieTexture/MovieTexture_Null.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture_Null.o -MD -MP -MF "$(DEPDIR)/MovieTexture_Null.Tpo" -c -o MovieTexture_Null.o `test -f 'arch/MovieTexture/MovieTexture_Null.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture_Null.cpp; \
	then mv -f "$(DEPDIR)/MovieTexture_Null.Tpo" "$(DEPDIR)/MovieTexture_Null.Po"; else rm -f "$(DEPDIR)/MovieTexture_Null.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture_Null.cpp' object='MovieTexture_Null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture_Null.o `test -f 'arch/MovieTexture/MovieTexture_Null.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture_Null.cpp

MovieTexture_Null.obj: arch/MovieTexture/MovieTexture_Null.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture_Null.obj -MD -MP -MF "$(DEPDIR)/MovieTexture_Null.Tpo" -c -o MovieTexture_Null.obj `if test -f 'arch/MovieTexture/MovieTexture_Null.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture_Null.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture_Null.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MovieTexture_Null.Tpo" "$(DEPDIR)/MovieTexture_Null.Po"; else rm -f "$(DEPDIR)/MovieTexture_Null.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture_Null.cpp' object='MovieTexture_Null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture_Null.obj `if test -f 'arch/MovieTexture/MovieTexture_Null.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture_Null.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture_Null.cpp'; fi`

MovieTexture_FFMpeg.o: arch/MovieTexture/MovieTexture_FFMpeg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture_FFMpeg.o -MD -MP -MF "$(DEPDIR)/MovieTexture_FFMpeg.Tpo" -c -o MovieTexture_FFMpeg.o `test -f 'arch/MovieTexture/MovieTexture_FFMpeg.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture_FFMpeg.cpp; \
	then mv -f "$(DEPDIR)/MovieTexture_FFMpeg.Tpo" "$(DEPDIR)/MovieTexture_FFMpeg.Po"; else rm -f "$(DEPDIR)/MovieTexture_FFMpeg.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture_FFMpeg.cpp' object='MovieTexture_FFMpeg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture_FFMpeg.o `test -f 'arch/MovieTexture/MovieTexture_FFMpeg.cpp' || echo '$(srcdir)/'`arch/MovieTexture/MovieTexture_FFMpeg.cpp

MovieTexture_FFMpeg.obj: arch/MovieTexture/MovieTexture_FFMpeg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MovieTexture_FFMpeg.obj -MD -MP -MF "$(DEPDIR)/MovieTexture_FFMpeg.Tpo" -c -o MovieTexture_FFMpeg.obj `if test -f 'arch/MovieTexture/MovieTexture_FFMpeg.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture_FFMpeg.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture_FFMpeg.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MovieTexture_FFMpeg.Tpo" "$(DEPDIR)/MovieTexture_FFMpeg.Po"; else rm -f "$(DEPDIR)/MovieTexture_FFMpeg.Tpo"; exit 1; fi
#	source='arch/MovieTexture/MovieTexture_FFMpeg.cpp' object='MovieTexture_FFMpeg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MovieTexture_FFMpeg.obj `if test -f 'arch/MovieTexture/MovieTexture_FFMpeg.cpp'; then $(CYGPATH_W) 'arch/MovieTexture/MovieTexture_FFMpeg.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MovieTexture/MovieTexture_FFMpeg.cpp'; fi`

LightsDriver_SystemMessage.o: arch/Lights/LightsDriver_SystemMessage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_SystemMessage.o -MD -MP -MF "$(DEPDIR)/LightsDriver_SystemMessage.Tpo" -c -o LightsDriver_SystemMessage.o `test -f 'arch/Lights/LightsDriver_SystemMessage.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_SystemMessage.cpp; \
	then mv -f "$(DEPDIR)/LightsDriver_SystemMessage.Tpo" "$(DEPDIR)/LightsDriver_SystemMessage.Po"; else rm -f "$(DEPDIR)/LightsDriver_SystemMessage.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_SystemMessage.cpp' object='LightsDriver_SystemMessage.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_SystemMessage.o `test -f 'arch/Lights/LightsDriver_SystemMessage.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_SystemMessage.cpp

LightsDriver_SystemMessage.obj: arch/Lights/LightsDriver_SystemMessage.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_SystemMessage.obj -MD -MP -MF "$(DEPDIR)/LightsDriver_SystemMessage.Tpo" -c -o LightsDriver_SystemMessage.obj `if test -f 'arch/Lights/LightsDriver_SystemMessage.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_SystemMessage.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_SystemMessage.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LightsDriver_SystemMessage.Tpo" "$(DEPDIR)/LightsDriver_SystemMessage.Po"; else rm -f "$(DEPDIR)/LightsDriver_SystemMessage.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_SystemMessage.cpp' object='LightsDriver_SystemMessage.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_SystemMessage.obj `if test -f 'arch/Lights/LightsDriver_SystemMessage.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_SystemMessage.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_SystemMessage.cpp'; fi`

LightsDriver_LinuxWeedTech.o: arch/Lights/LightsDriver_LinuxWeedTech.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_LinuxWeedTech.o -MD -MP -MF "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo" -c -o LightsDriver_LinuxWeedTech.o `test -f 'arch/Lights/LightsDriver_LinuxWeedTech.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_LinuxWeedTech.cpp; \
	then mv -f "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo" "$(DEPDIR)/LightsDriver_LinuxWeedTech.Po"; else rm -f "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_LinuxWeedTech.cpp' object='LightsDriver_LinuxWeedTech.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_LinuxWeedTech.o `test -f 'arch/Lights/LightsDriver_LinuxWeedTech.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_LinuxWeedTech.cpp

LightsDriver_LinuxWeedTech.obj: arch/Lights/LightsDriver_LinuxWeedTech.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_LinuxWeedTech.obj -MD -MP -MF "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo" -c -o LightsDriver_LinuxWeedTech.obj `if test -f 'arch/Lights/LightsDriver_LinuxWeedTech.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_LinuxWeedTech.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_LinuxWeedTech.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo" "$(DEPDIR)/LightsDriver_LinuxWeedTech.Po"; else rm -f "$(DEPDIR)/LightsDriver_LinuxWeedTech.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_LinuxWeedTech.cpp' object='LightsDriver_LinuxWeedTech.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_LinuxWeedTech.obj `if test -f 'arch/Lights/LightsDriver_LinuxWeedTech.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_LinuxWeedTech.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_LinuxWeedTech.cpp'; fi`

LightsDriver_LinuxParallel.o: arch/Lights/LightsDriver_LinuxParallel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_LinuxParallel.o -MD -MP -MF "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo" -c -o LightsDriver_LinuxParallel.o `test -f 'arch/Lights/LightsDriver_LinuxParallel.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_LinuxParallel.cpp; \
	then mv -f "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo" "$(DEPDIR)/LightsDriver_LinuxParallel.Po"; else rm -f "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_LinuxParallel.cpp' object='LightsDriver_LinuxParallel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_LinuxParallel.o `test -f 'arch/Lights/LightsDriver_LinuxParallel.cpp' || echo '$(srcdir)/'`arch/Lights/LightsDriver_LinuxParallel.cpp

LightsDriver_LinuxParallel.obj: arch/Lights/LightsDriver_LinuxParallel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LightsDriver_LinuxParallel.obj -MD -MP -MF "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo" -c -o LightsDriver_LinuxParallel.obj `if test -f 'arch/Lights/LightsDriver_LinuxParallel.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_LinuxParallel.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_LinuxParallel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo" "$(DEPDIR)/LightsDriver_LinuxParallel.Po"; else rm -f "$(DEPDIR)/LightsDriver_LinuxParallel.Tpo"; exit 1; fi
#	source='arch/Lights/LightsDriver_LinuxParallel.cpp' object='LightsDriver_LinuxParallel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LightsDriver_LinuxParallel.obj `if test -f 'arch/Lights/LightsDriver_LinuxParallel.cpp'; then $(CYGPATH_W) 'arch/Lights/LightsDriver_LinuxParallel.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Lights/LightsDriver_LinuxParallel.cpp'; fi`

MemoryCardDriver.o: arch/MemoryCard/MemoryCardDriver.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryCardDriver.o -MD -MP -MF "$(DEPDIR)/MemoryCardDriver.Tpo" -c -o MemoryCardDriver.o `test -f 'arch/MemoryCard/MemoryCardDriver.cpp' || echo '$(srcdir)/'`arch/MemoryCard/MemoryCardDriver.cpp; \
	then mv -f "$(DEPDIR)/MemoryCardDriver.Tpo" "$(DEPDIR)/MemoryCardDriver.Po"; else rm -f "$(DEPDIR)/MemoryCardDriver.Tpo"; exit 1; fi
#	source='arch/MemoryCard/MemoryCardDriver.cpp' object='MemoryCardDriver.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryCardDriver.o `test -f 'arch/MemoryCard/MemoryCardDriver.cpp' || echo '$(srcdir)/'`arch/MemoryCard/MemoryCardDriver.cpp

MemoryCardDriver.obj: arch/MemoryCard/MemoryCardDriver.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryCardDriver.obj -MD -MP -MF "$(DEPDIR)/MemoryCardDriver.Tpo" -c -o MemoryCardDriver.obj `if test -f 'arch/MemoryCard/MemoryCardDriver.cpp'; then $(CYGPATH_W) 'arch/MemoryCard/MemoryCardDriver.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MemoryCard/MemoryCardDriver.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MemoryCardDriver.Tpo" "$(DEPDIR)/MemoryCardDriver.Po"; else rm -f "$(DEPDIR)/MemoryCardDriver.Tpo"; exit 1; fi
#	source='arch/MemoryCard/MemoryCardDriver.cpp' object='MemoryCardDriver.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryCardDriver.obj `if test -f 'arch/MemoryCard/MemoryCardDriver.cpp'; then $(CYGPATH_W) 'arch/MemoryCard/MemoryCardDriver.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MemoryCard/MemoryCardDriver.cpp'; fi`

MemoryCardDriverThreaded_Linux.o: arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryCardDriverThreaded_Linux.o -MD -MP -MF "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo" -c -o MemoryCardDriverThreaded_Linux.o `test -f 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp' || echo '$(srcdir)/'`arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp; \
	then mv -f "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo" "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Po"; else rm -f "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo"; exit 1; fi
#	source='arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp' object='MemoryCardDriverThreaded_Linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryCardDriverThreaded_Linux.o `test -f 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp' || echo '$(srcdir)/'`arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp

MemoryCardDriverThreaded_Linux.obj: arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MemoryCardDriverThreaded_Linux.obj -MD -MP -MF "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo" -c -o MemoryCardDriverThreaded_Linux.obj `if test -f 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; then $(CYGPATH_W) 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; fi`; \
	then mv -f "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo" "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Po"; else rm -f "$(DEPDIR)/MemoryCardDriverThreaded_Linux.Tpo"; exit 1; fi
#	source='arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp' object='MemoryCardDriverThreaded_Linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MemoryCardDriverThreaded_Linux.obj `if test -f 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; then $(CYGPATH_W) 'arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/MemoryCard/MemoryCardDriverThreaded_Linux.cpp'; fi`

LowLevelWindow_SDL.o: arch/LowLevelWindow/LowLevelWindow_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LowLevelWindow_SDL.o -MD -MP -MF "$(DEPDIR)/LowLevelWindow_SDL.Tpo" -c -o LowLevelWindow_SDL.o `test -f 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp' || echo '$(srcdir)/'`arch/LowLevelWindow/LowLevelWindow_SDL.cpp; \
	then mv -f "$(DEPDIR)/LowLevelWindow_SDL.Tpo" "$(DEPDIR)/LowLevelWindow_SDL.Po"; else rm -f "$(DEPDIR)/LowLevelWindow_SDL.Tpo"; exit 1; fi
#	source='arch/LowLevelWindow/LowLevelWindow_SDL.cpp' object='LowLevelWindow_SDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LowLevelWindow_SDL.o `test -f 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp' || echo '$(srcdir)/'`arch/LowLevelWindow/LowLevelWindow_SDL.cpp

LowLevelWindow_SDL.obj: arch/LowLevelWindow/LowLevelWindow_SDL.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LowLevelWindow_SDL.obj -MD -MP -MF "$(DEPDIR)/LowLevelWindow_SDL.Tpo" -c -o LowLevelWindow_SDL.obj `if test -f 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; then $(CYGPATH_W) 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LowLevelWindow_SDL.Tpo" "$(DEPDIR)/LowLevelWindow_SDL.Po"; else rm -f "$(DEPDIR)/LowLevelWindow_SDL.Tpo"; exit 1; fi
#	source='arch/LowLevelWindow/LowLevelWindow_SDL.cpp' object='LowLevelWindow_SDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LowLevelWindow_SDL.obj `if test -f 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; then $(CYGPATH_W) 'arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LowLevelWindow/LowLevelWindow_SDL.cpp'; fi`

LowLevelWindow_X11.o: arch/LowLevelWindow/LowLevelWindow_X11.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LowLevelWindow_X11.o -MD -MP -MF "$(DEPDIR)/LowLevelWindow_X11.Tpo" -c -o LowLevelWindow_X11.o `test -f 'arch/LowLevelWindow/LowLevelWindow_X11.cpp' || echo '$(srcdir)/'`arch/LowLevelWindow/LowLevelWindow_X11.cpp; \
	then mv -f "$(DEPDIR)/LowLevelWindow_X11.Tpo" "$(DEPDIR)/LowLevelWindow_X11.Po"; else rm -f "$(DEPDIR)/LowLevelWindow_X11.Tpo"; exit 1; fi
#	source='arch/LowLevelWindow/LowLevelWindow_X11.cpp' object='LowLevelWindow_X11.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LowLevelWindow_X11.o `test -f 'arch/LowLevelWindow/LowLevelWindow_X11.cpp' || echo '$(srcdir)/'`arch/LowLevelWindow/LowLevelWindow_X11.cpp

LowLevelWindow_X11.obj: arch/LowLevelWindow/LowLevelWindow_X11.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LowLevelWindow_X11.obj -MD -MP -MF "$(DEPDIR)/LowLevelWindow_X11.Tpo" -c -o LowLevelWindow_X11.obj `if test -f 'arch/LowLevelWindow/LowLevelWindow_X11.cpp'; then $(CYGPATH_W) 'arch/LowLevelWindow/LowLevelWindow_X11.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LowLevelWindow/LowLevelWindow_X11.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LowLevelWindow_X11.Tpo" "$(DEPDIR)/LowLevelWindow_X11.Po"; else rm -f "$(DEPDIR)/LowLevelWindow_X11.Tpo"; exit 1; fi
#	source='arch/LowLevelWindow/LowLevelWindow_X11.cpp' object='LowLevelWindow_X11.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LowLevelWindow_X11.obj `if test -f 'arch/LowLevelWindow/LowLevelWindow_X11.cpp'; then $(CYGPATH_W) 'arch/LowLevelWindow/LowLevelWindow_X11.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/LowLevelWindow/LowLevelWindow_X11.cpp'; fi`

X11Helper.o: archutils/Unix/X11Helper.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT X11Helper.o -MD -MP -MF "$(DEPDIR)/X11Helper.Tpo" -c -o X11Helper.o `test -f 'archutils/Unix/X11Helper.cpp' || echo '$(srcdir)/'`archutils/Unix/X11Helper.cpp; \
	then mv -f "$(DEPDIR)/X11Helper.Tpo" "$(DEPDIR)/X11Helper.Po"; else rm -f "$(DEPDIR)/X11Helper.Tpo"; exit 1; fi
#	source='archutils/Unix/X11Helper.cpp' object='X11Helper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o X11Helper.o `test -f 'archutils/Unix/X11Helper.cpp' || echo '$(srcdir)/'`archutils/Unix/X11Helper.cpp

X11Helper.obj: archutils/Unix/X11Helper.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT X11Helper.obj -MD -MP -MF "$(DEPDIR)/X11Helper.Tpo" -c -o X11Helper.obj `if test -f 'archutils/Unix/X11Helper.cpp'; then $(CYGPATH_W) 'archutils/Unix/X11Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/X11Helper.cpp'; fi`; \
	then mv -f "$(DEPDIR)/X11Helper.Tpo" "$(DEPDIR)/X11Helper.Po"; else rm -f "$(DEPDIR)/X11Helper.Tpo"; exit 1; fi
#	source='archutils/Unix/X11Helper.cpp' object='X11Helper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o X11Helper.obj `if test -f 'archutils/Unix/X11Helper.cpp'; then $(CYGPATH_W) 'archutils/Unix/X11Helper.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/X11Helper.cpp'; fi`

AssertionHandler.o: archutils/Unix/AssertionHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssertionHandler.o -MD -MP -MF "$(DEPDIR)/AssertionHandler.Tpo" -c -o AssertionHandler.o `test -f 'archutils/Unix/AssertionHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/AssertionHandler.cpp; \
	then mv -f "$(DEPDIR)/AssertionHandler.Tpo" "$(DEPDIR)/AssertionHandler.Po"; else rm -f "$(DEPDIR)/AssertionHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/AssertionHandler.cpp' object='AssertionHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssertionHandler.o `test -f 'archutils/Unix/AssertionHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/AssertionHandler.cpp

AssertionHandler.obj: archutils/Unix/AssertionHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AssertionHandler.obj -MD -MP -MF "$(DEPDIR)/AssertionHandler.Tpo" -c -o AssertionHandler.obj `if test -f 'archutils/Unix/AssertionHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/AssertionHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/AssertionHandler.cpp'; fi`; \
	then mv -f "$(DEPDIR)/AssertionHandler.Tpo" "$(DEPDIR)/AssertionHandler.Po"; else rm -f "$(DEPDIR)/AssertionHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/AssertionHandler.cpp' object='AssertionHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AssertionHandler.obj `if test -f 'archutils/Unix/AssertionHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/AssertionHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/AssertionHandler.cpp'; fi`

GetSysInfo.o: archutils/Unix/GetSysInfo.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GetSysInfo.o -MD -MP -MF "$(DEPDIR)/GetSysInfo.Tpo" -c -o GetSysInfo.o `test -f 'archutils/Unix/GetSysInfo.cpp' || echo '$(srcdir)/'`archutils/Unix/GetSysInfo.cpp; \
	then mv -f "$(DEPDIR)/GetSysInfo.Tpo" "$(DEPDIR)/GetSysInfo.Po"; else rm -f "$(DEPDIR)/GetSysInfo.Tpo"; exit 1; fi
#	source='archutils/Unix/GetSysInfo.cpp' object='GetSysInfo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GetSysInfo.o `test -f 'archutils/Unix/GetSysInfo.cpp' || echo '$(srcdir)/'`archutils/Unix/GetSysInfo.cpp

GetSysInfo.obj: archutils/Unix/GetSysInfo.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GetSysInfo.obj -MD -MP -MF "$(DEPDIR)/GetSysInfo.Tpo" -c -o GetSysInfo.obj `if test -f 'archutils/Unix/GetSysInfo.cpp'; then $(CYGPATH_W) 'archutils/Unix/GetSysInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/GetSysInfo.cpp'; fi`; \
	then mv -f "$(DEPDIR)/GetSysInfo.Tpo" "$(DEPDIR)/GetSysInfo.Po"; else rm -f "$(DEPDIR)/GetSysInfo.Tpo"; exit 1; fi
#	source='archutils/Unix/GetSysInfo.cpp' object='GetSysInfo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GetSysInfo.obj `if test -f 'archutils/Unix/GetSysInfo.cpp'; then $(CYGPATH_W) 'archutils/Unix/GetSysInfo.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/GetSysInfo.cpp'; fi`

SignalHandler.o: archutils/Unix/SignalHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SignalHandler.o -MD -MP -MF "$(DEPDIR)/SignalHandler.Tpo" -c -o SignalHandler.o `test -f 'archutils/Unix/SignalHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/SignalHandler.cpp; \
	then mv -f "$(DEPDIR)/SignalHandler.Tpo" "$(DEPDIR)/SignalHandler.Po"; else rm -f "$(DEPDIR)/SignalHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/SignalHandler.cpp' object='SignalHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SignalHandler.o `test -f 'archutils/Unix/SignalHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/SignalHandler.cpp

SignalHandler.obj: archutils/Unix/SignalHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SignalHandler.obj -MD -MP -MF "$(DEPDIR)/SignalHandler.Tpo" -c -o SignalHandler.obj `if test -f 'archutils/Unix/SignalHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/SignalHandler.cpp'; fi`; \
	then mv -f "$(DEPDIR)/SignalHandler.Tpo" "$(DEPDIR)/SignalHandler.Po"; else rm -f "$(DEPDIR)/SignalHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/SignalHandler.cpp' object='SignalHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SignalHandler.obj `if test -f 'archutils/Unix/SignalHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/SignalHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/SignalHandler.cpp'; fi`

LinuxThreadHelpers.o: archutils/Unix/LinuxThreadHelpers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LinuxThreadHelpers.o -MD -MP -MF "$(DEPDIR)/LinuxThreadHelpers.Tpo" -c -o LinuxThreadHelpers.o `test -f 'archutils/Unix/LinuxThreadHelpers.cpp' || echo '$(srcdir)/'`archutils/Unix/LinuxThreadHelpers.cpp; \
	then mv -f "$(DEPDIR)/LinuxThreadHelpers.Tpo" "$(DEPDIR)/LinuxThreadHelpers.Po"; else rm -f "$(DEPDIR)/LinuxThreadHelpers.Tpo"; exit 1; fi
#	source='archutils/Unix/LinuxThreadHelpers.cpp' object='LinuxThreadHelpers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LinuxThreadHelpers.o `test -f 'archutils/Unix/LinuxThreadHelpers.cpp' || echo '$(srcdir)/'`archutils/Unix/LinuxThreadHelpers.cpp

LinuxThreadHelpers.obj: archutils/Unix/LinuxThreadHelpers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LinuxThreadHelpers.obj -MD -MP -MF "$(DEPDIR)/LinuxThreadHelpers.Tpo" -c -o LinuxThreadHelpers.obj `if test -f 'archutils/Unix/LinuxThreadHelpers.cpp'; then $(CYGPATH_W) 'archutils/Unix/LinuxThreadHelpers.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/LinuxThreadHelpers.cpp'; fi`; \
	then mv -f "$(DEPDIR)/LinuxThreadHelpers.Tpo" "$(DEPDIR)/LinuxThreadHelpers.Po"; else rm -f "$(DEPDIR)/LinuxThreadHelpers.Tpo"; exit 1; fi
#	source='archutils/Unix/LinuxThreadHelpers.cpp' object='LinuxThreadHelpers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LinuxThreadHelpers.obj `if test -f 'archutils/Unix/LinuxThreadHelpers.cpp'; then $(CYGPATH_W) 'archutils/Unix/LinuxThreadHelpers.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/LinuxThreadHelpers.cpp'; fi`

RunningUnderValgrind.o: archutils/Unix/RunningUnderValgrind.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RunningUnderValgrind.o -MD -MP -MF "$(DEPDIR)/RunningUnderValgrind.Tpo" -c -o RunningUnderValgrind.o `test -f 'archutils/Unix/RunningUnderValgrind.cpp' || echo '$(srcdir)/'`archutils/Unix/RunningUnderValgrind.cpp; \
	then mv -f "$(DEPDIR)/RunningUnderValgrind.Tpo" "$(DEPDIR)/RunningUnderValgrind.Po"; else rm -f "$(DEPDIR)/RunningUnderValgrind.Tpo"; exit 1; fi
#	source='archutils/Unix/RunningUnderValgrind.cpp' object='RunningUnderValgrind.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RunningUnderValgrind.o `test -f 'archutils/Unix/RunningUnderValgrind.cpp' || echo '$(srcdir)/'`archutils/Unix/RunningUnderValgrind.cpp

RunningUnderValgrind.obj: archutils/Unix/RunningUnderValgrind.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RunningUnderValgrind.obj -MD -MP -MF "$(DEPDIR)/RunningUnderValgrind.Tpo" -c -o RunningUnderValgrind.obj `if test -f 'archutils/Unix/RunningUnderValgrind.cpp'; then $(CYGPATH_W) 'archutils/Unix/RunningUnderValgrind.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/RunningUnderValgrind.cpp'; fi`; \
	then mv -f "$(DEPDIR)/RunningUnderValgrind.Tpo" "$(DEPDIR)/RunningUnderValgrind.Po"; else rm -f "$(DEPDIR)/RunningUnderValgrind.Tpo"; exit 1; fi
#	source='archutils/Unix/RunningUnderValgrind.cpp' object='RunningUnderValgrind.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RunningUnderValgrind.obj `if test -f 'archutils/Unix/RunningUnderValgrind.cpp'; then $(CYGPATH_W) 'archutils/Unix/RunningUnderValgrind.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/RunningUnderValgrind.cpp'; fi`

EmergencyShutdown.o: archutils/Unix/EmergencyShutdown.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EmergencyShutdown.o -MD -MP -MF "$(DEPDIR)/EmergencyShutdown.Tpo" -c -o EmergencyShutdown.o `test -f 'archutils/Unix/EmergencyShutdown.cpp' || echo '$(srcdir)/'`archutils/Unix/EmergencyShutdown.cpp; \
	then mv -f "$(DEPDIR)/EmergencyShutdown.Tpo" "$(DEPDIR)/EmergencyShutdown.Po"; else rm -f "$(DEPDIR)/EmergencyShutdown.Tpo"; exit 1; fi
#	source='archutils/Unix/EmergencyShutdown.cpp' object='EmergencyShutdown.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EmergencyShutdown.o `test -f 'archutils/Unix/EmergencyShutdown.cpp' || echo '$(srcdir)/'`archutils/Unix/EmergencyShutdown.cpp

EmergencyShutdown.obj: archutils/Unix/EmergencyShutdown.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EmergencyShutdown.obj -MD -MP -MF "$(DEPDIR)/EmergencyShutdown.Tpo" -c -o EmergencyShutdown.obj `if test -f 'archutils/Unix/EmergencyShutdown.cpp'; then $(CYGPATH_W) 'archutils/Unix/EmergencyShutdown.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/EmergencyShutdown.cpp'; fi`; \
	then mv -f "$(DEPDIR)/EmergencyShutdown.Tpo" "$(DEPDIR)/EmergencyShutdown.Po"; else rm -f "$(DEPDIR)/EmergencyShutdown.Tpo"; exit 1; fi
#	source='archutils/Unix/EmergencyShutdown.cpp' object='EmergencyShutdown.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EmergencyShutdown.obj `if test -f 'archutils/Unix/EmergencyShutdown.cpp'; then $(CYGPATH_W) 'archutils/Unix/EmergencyShutdown.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/EmergencyShutdown.cpp'; fi`

Backtrace.o: archutils/Unix/Backtrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Backtrace.o -MD -MP -MF "$(DEPDIR)/Backtrace.Tpo" -c -o Backtrace.o `test -f 'archutils/Unix/Backtrace.cpp' || echo '$(srcdir)/'`archutils/Unix/Backtrace.cpp; \
	then mv -f "$(DEPDIR)/Backtrace.Tpo" "$(DEPDIR)/Backtrace.Po"; else rm -f "$(DEPDIR)/Backtrace.Tpo"; exit 1; fi
#	source='archutils/Unix/Backtrace.cpp' object='Backtrace.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Backtrace.o `test -f 'archutils/Unix/Backtrace.cpp' || echo '$(srcdir)/'`archutils/Unix/Backtrace.cpp

Backtrace.obj: archutils/Unix/Backtrace.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Backtrace.obj -MD -MP -MF "$(DEPDIR)/Backtrace.Tpo" -c -o Backtrace.obj `if test -f 'archutils/Unix/Backtrace.cpp'; then $(CYGPATH_W) 'archutils/Unix/Backtrace.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/Backtrace.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Backtrace.Tpo" "$(DEPDIR)/Backtrace.Po"; else rm -f "$(DEPDIR)/Backtrace.Tpo"; exit 1; fi
#	source='archutils/Unix/Backtrace.cpp' object='Backtrace.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Backtrace.obj `if test -f 'archutils/Unix/Backtrace.cpp'; then $(CYGPATH_W) 'archutils/Unix/Backtrace.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/Backtrace.cpp'; fi`

BacktraceNames.o: archutils/Unix/BacktraceNames.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BacktraceNames.o -MD -MP -MF "$(DEPDIR)/BacktraceNames.Tpo" -c -o BacktraceNames.o `test -f 'archutils/Unix/BacktraceNames.cpp' || echo '$(srcdir)/'`archutils/Unix/BacktraceNames.cpp; \
	then mv -f "$(DEPDIR)/BacktraceNames.Tpo" "$(DEPDIR)/BacktraceNames.Po"; else rm -f "$(DEPDIR)/BacktraceNames.Tpo"; exit 1; fi
#	source='archutils/Unix/BacktraceNames.cpp' object='BacktraceNames.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BacktraceNames.o `test -f 'archutils/Unix/BacktraceNames.cpp' || echo '$(srcdir)/'`archutils/Unix/BacktraceNames.cpp

BacktraceNames.obj: archutils/Unix/BacktraceNames.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BacktraceNames.obj -MD -MP -MF "$(DEPDIR)/BacktraceNames.Tpo" -c -o BacktraceNames.obj `if test -f 'archutils/Unix/BacktraceNames.cpp'; then $(CYGPATH_W) 'archutils/Unix/BacktraceNames.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/BacktraceNames.cpp'; fi`; \
	then mv -f "$(DEPDIR)/BacktraceNames.Tpo" "$(DEPDIR)/BacktraceNames.Po"; else rm -f "$(DEPDIR)/BacktraceNames.Tpo"; exit 1; fi
#	source='archutils/Unix/BacktraceNames.cpp' object='BacktraceNames.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BacktraceNames.obj `if test -f 'archutils/Unix/BacktraceNames.cpp'; then $(CYGPATH_W) 'archutils/Unix/BacktraceNames.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/BacktraceNames.cpp'; fi`

CrashHandler.o: archutils/Unix/CrashHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrashHandler.o -MD -MP -MF "$(DEPDIR)/CrashHandler.Tpo" -c -o CrashHandler.o `test -f 'archutils/Unix/CrashHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/CrashHandler.cpp; \
	then mv -f "$(DEPDIR)/CrashHandler.Tpo" "$(DEPDIR)/CrashHandler.Po"; else rm -f "$(DEPDIR)/CrashHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/CrashHandler.cpp' object='CrashHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrashHandler.o `test -f 'archutils/Unix/CrashHandler.cpp' || echo '$(srcdir)/'`archutils/Unix/CrashHandler.cpp

CrashHandler.obj: archutils/Unix/CrashHandler.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrashHandler.obj -MD -MP -MF "$(DEPDIR)/CrashHandler.Tpo" -c -o CrashHandler.obj `if test -f 'archutils/Unix/CrashHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/CrashHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/CrashHandler.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CrashHandler.Tpo" "$(DEPDIR)/CrashHandler.Po"; else rm -f "$(DEPDIR)/CrashHandler.Tpo"; exit 1; fi
#	source='archutils/Unix/CrashHandler.cpp' object='CrashHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrashHandler.obj `if test -f 'archutils/Unix/CrashHandler.cpp'; then $(CYGPATH_W) 'archutils/Unix/CrashHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/CrashHandler.cpp'; fi`

CrashHandlerChild.o: archutils/Unix/CrashHandlerChild.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrashHandlerChild.o -MD -MP -MF "$(DEPDIR)/CrashHandlerChild.Tpo" -c -o CrashHandlerChild.o `test -f 'archutils/Unix/CrashHandlerChild.cpp' || echo '$(srcdir)/'`archutils/Unix/CrashHandlerChild.cpp; \
	then mv -f "$(DEPDIR)/CrashHandlerChild.Tpo" "$(DEPDIR)/CrashHandlerChild.Po"; else rm -f "$(DEPDIR)/CrashHandlerChild.Tpo"; exit 1; fi
#	source='archutils/Unix/CrashHandlerChild.cpp' object='CrashHandlerChild.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrashHandlerChild.o `test -f 'archutils/Unix/CrashHandlerChild.cpp' || echo '$(srcdir)/'`archutils/Unix/CrashHandlerChild.cpp

CrashHandlerChild.obj: archutils/Unix/CrashHandlerChild.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CrashHandlerChild.obj -MD -MP -MF "$(DEPDIR)/CrashHandlerChild.Tpo" -c -o CrashHandlerChild.obj `if test -f 'archutils/Unix/CrashHandlerChild.cpp'; then $(CYGPATH_W) 'archutils/Unix/CrashHandlerChild.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/CrashHandlerChild.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CrashHandlerChild.Tpo" "$(DEPDIR)/CrashHandlerChild.Po"; else rm -f "$(DEPDIR)/CrashHandlerChild.Tpo"; exit 1; fi
#	source='archutils/Unix/CrashHandlerChild.cpp' object='CrashHandlerChild.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CrashHandlerChild.obj `if test -f 'archutils/Unix/CrashHandlerChild.cpp'; then $(CYGPATH_W) 'archutils/Unix/CrashHandlerChild.cpp'; else $(CYGPATH_W) '$(srcdir)/archutils/Unix/CrashHandlerChild.cpp'; fi`

Dialog.o: arch/Dialog/Dialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dialog.o -MD -MP -MF "$(DEPDIR)/Dialog.Tpo" -c -o Dialog.o `test -f 'arch/Dialog/Dialog.cpp' || echo '$(srcdir)/'`arch/Dialog/Dialog.cpp; \
	then mv -f "$(DEPDIR)/Dialog.Tpo" "$(DEPDIR)/Dialog.Po"; else rm -f "$(DEPDIR)/Dialog.Tpo"; exit 1; fi
#	source='arch/Dialog/Dialog.cpp' object='Dialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dialog.o `test -f 'arch/Dialog/Dialog.cpp' || echo '$(srcdir)/'`arch/Dialog/Dialog.cpp

Dialog.obj: arch/Dialog/Dialog.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Dialog.obj -MD -MP -MF "$(DEPDIR)/Dialog.Tpo" -c -o Dialog.obj `if test -f 'arch/Dialog/Dialog.cpp'; then $(CYGPATH_W) 'arch/Dialog/Dialog.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Dialog/Dialog.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Dialog.Tpo" "$(DEPDIR)/Dialog.Po"; else rm -f "$(DEPDIR)/Dialog.Tpo"; exit 1; fi
#	source='arch/Dialog/Dialog.cpp' object='Dialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Dialog.obj `if test -f 'arch/Dialog/Dialog.cpp'; then $(CYGPATH_W) 'arch/Dialog/Dialog.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Dialog/Dialog.cpp'; fi`

Threads_Pthreads.o: arch/Threads/Threads_Pthreads.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Threads_Pthreads.o -MD -MP -MF "$(DEPDIR)/Threads_Pthreads.Tpo" -c -o Threads_Pthreads.o `test -f 'arch/Threads/Threads_Pthreads.cpp' || echo '$(srcdir)/'`arch/Threads/Threads_Pthreads.cpp; \
	then mv -f "$(DEPDIR)/Threads_Pthreads.Tpo" "$(DEPDIR)/Threads_Pthreads.Po"; else rm -f "$(DEPDIR)/Threads_Pthreads.Tpo"; exit 1; fi
#	source='arch/Threads/Threads_Pthreads.cpp' object='Threads_Pthreads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Threads_Pthreads.o `test -f 'arch/Threads/Threads_Pthreads.cpp' || echo '$(srcdir)/'`arch/Threads/Threads_Pthreads.cpp

Threads_Pthreads.obj: arch/Threads/Threads_Pthreads.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Threads_Pthreads.obj -MD -MP -MF "$(DEPDIR)/Threads_Pthreads.Tpo" -c -o Threads_Pthreads.obj `if test -f 'arch/Threads/Threads_Pthreads.cpp'; then $(CYGPATH_W) 'arch/Threads/Threads_Pthreads.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Threads/Threads_Pthreads.cpp'; fi`; \
	then mv -f "$(DEPDIR)/Threads_Pthreads.Tpo" "$(DEPDIR)/Threads_Pthreads.Po"; else rm -f "$(DEPDIR)/Threads_Pthreads.Tpo"; exit 1; fi
#	source='arch/Threads/Threads_Pthreads.cpp' object='Threads_Pthreads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Threads_Pthreads.obj `if test -f 'arch/Threads/Threads_Pthreads.cpp'; then $(CYGPATH_W) 'arch/Threads/Threads_Pthreads.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/Threads/Threads_Pthreads.cpp'; fi`

arch.o: arch/arch.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT arch.o -MD -MP -MF "$(DEPDIR)/arch.Tpo" -c -o arch.o `test -f 'arch/arch.cpp' || echo '$(srcdir)/'`arch/arch.cpp; \
	then mv -f "$(DEPDIR)/arch.Tpo" "$(DEPDIR)/arch.Po"; else rm -f "$(DEPDIR)/arch.Tpo"; exit 1; fi
#	source='arch/arch.cpp' object='arch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o arch.o `test -f 'arch/arch.cpp' || echo '$(srcdir)/'`arch/arch.cpp

arch.obj: arch/arch.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT arch.obj -MD -MP -MF "$(DEPDIR)/arch.Tpo" -c -o arch.obj `if test -f 'arch/arch.cpp'; then $(CYGPATH_W) 'arch/arch.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/arch.cpp'; fi`; \
	then mv -f "$(DEPDIR)/arch.Tpo" "$(DEPDIR)/arch.Po"; else rm -f "$(DEPDIR)/arch.Tpo"; exit 1; fi
#	source='arch/arch.cpp' object='arch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o arch.obj `if test -f 'arch/arch.cpp'; then $(CYGPATH_W) 'arch/arch.cpp'; else $(CYGPATH_W) '$(srcdir)/arch/arch.cpp'; fi`

CryptBn.o: crypto/CryptBn.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptBn.o -MD -MP -MF "$(DEPDIR)/CryptBn.Tpo" -c -o CryptBn.o `test -f 'crypto/CryptBn.cpp' || echo '$(srcdir)/'`crypto/CryptBn.cpp; \
	then mv -f "$(DEPDIR)/CryptBn.Tpo" "$(DEPDIR)/CryptBn.Po"; else rm -f "$(DEPDIR)/CryptBn.Tpo"; exit 1; fi
#	source='crypto/CryptBn.cpp' object='CryptBn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptBn.o `test -f 'crypto/CryptBn.cpp' || echo '$(srcdir)/'`crypto/CryptBn.cpp

CryptBn.obj: crypto/CryptBn.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptBn.obj -MD -MP -MF "$(DEPDIR)/CryptBn.Tpo" -c -o CryptBn.obj `if test -f 'crypto/CryptBn.cpp'; then $(CYGPATH_W) 'crypto/CryptBn.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptBn.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptBn.Tpo" "$(DEPDIR)/CryptBn.Po"; else rm -f "$(DEPDIR)/CryptBn.Tpo"; exit 1; fi
#	source='crypto/CryptBn.cpp' object='CryptBn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptBn.obj `if test -f 'crypto/CryptBn.cpp'; then $(CYGPATH_W) 'crypto/CryptBn.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptBn.cpp'; fi`

CryptMD5.o: crypto/CryptMD5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptMD5.o -MD -MP -MF "$(DEPDIR)/CryptMD5.Tpo" -c -o CryptMD5.o `test -f 'crypto/CryptMD5.cpp' || echo '$(srcdir)/'`crypto/CryptMD5.cpp; \
	then mv -f "$(DEPDIR)/CryptMD5.Tpo" "$(DEPDIR)/CryptMD5.Po"; else rm -f "$(DEPDIR)/CryptMD5.Tpo"; exit 1; fi
#	source='crypto/CryptMD5.cpp' object='CryptMD5.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptMD5.o `test -f 'crypto/CryptMD5.cpp' || echo '$(srcdir)/'`crypto/CryptMD5.cpp

CryptMD5.obj: crypto/CryptMD5.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptMD5.obj -MD -MP -MF "$(DEPDIR)/CryptMD5.Tpo" -c -o CryptMD5.obj `if test -f 'crypto/CryptMD5.cpp'; then $(CYGPATH_W) 'crypto/CryptMD5.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptMD5.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptMD5.Tpo" "$(DEPDIR)/CryptMD5.Po"; else rm -f "$(DEPDIR)/CryptMD5.Tpo"; exit 1; fi
#	source='crypto/CryptMD5.cpp' object='CryptMD5.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptMD5.obj `if test -f 'crypto/CryptMD5.cpp'; then $(CYGPATH_W) 'crypto/CryptMD5.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptMD5.cpp'; fi`

CryptNoise.o: crypto/CryptNoise.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptNoise.o -MD -MP -MF "$(DEPDIR)/CryptNoise.Tpo" -c -o CryptNoise.o `test -f 'crypto/CryptNoise.cpp' || echo '$(srcdir)/'`crypto/CryptNoise.cpp; \
	then mv -f "$(DEPDIR)/CryptNoise.Tpo" "$(DEPDIR)/CryptNoise.Po"; else rm -f "$(DEPDIR)/CryptNoise.Tpo"; exit 1; fi
#	source='crypto/CryptNoise.cpp' object='CryptNoise.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptNoise.o `test -f 'crypto/CryptNoise.cpp' || echo '$(srcdir)/'`crypto/CryptNoise.cpp

CryptNoise.obj: crypto/CryptNoise.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptNoise.obj -MD -MP -MF "$(DEPDIR)/CryptNoise.Tpo" -c -o CryptNoise.obj `if test -f 'crypto/CryptNoise.cpp'; then $(CYGPATH_W) 'crypto/CryptNoise.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptNoise.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptNoise.Tpo" "$(DEPDIR)/CryptNoise.Po"; else rm -f "$(DEPDIR)/CryptNoise.Tpo"; exit 1; fi
#	source='crypto/CryptNoise.cpp' object='CryptNoise.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptNoise.obj `if test -f 'crypto/CryptNoise.cpp'; then $(CYGPATH_W) 'crypto/CryptNoise.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptNoise.cpp'; fi`

CryptPrime.o: crypto/CryptPrime.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptPrime.o -MD -MP -MF "$(DEPDIR)/CryptPrime.Tpo" -c -o CryptPrime.o `test -f 'crypto/CryptPrime.cpp' || echo '$(srcdir)/'`crypto/CryptPrime.cpp; \
	then mv -f "$(DEPDIR)/CryptPrime.Tpo" "$(DEPDIR)/CryptPrime.Po"; else rm -f "$(DEPDIR)/CryptPrime.Tpo"; exit 1; fi
#	source='crypto/CryptPrime.cpp' object='CryptPrime.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptPrime.o `test -f 'crypto/CryptPrime.cpp' || echo '$(srcdir)/'`crypto/CryptPrime.cpp

CryptPrime.obj: crypto/CryptPrime.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptPrime.obj -MD -MP -MF "$(DEPDIR)/CryptPrime.Tpo" -c -o CryptPrime.obj `if test -f 'crypto/CryptPrime.cpp'; then $(CYGPATH_W) 'crypto/CryptPrime.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptPrime.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptPrime.Tpo" "$(DEPDIR)/CryptPrime.Po"; else rm -f "$(DEPDIR)/CryptPrime.Tpo"; exit 1; fi
#	source='crypto/CryptPrime.cpp' object='CryptPrime.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptPrime.obj `if test -f 'crypto/CryptPrime.cpp'; then $(CYGPATH_W) 'crypto/CryptPrime.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptPrime.cpp'; fi`

CryptRSA.o: crypto/CryptRSA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptRSA.o -MD -MP -MF "$(DEPDIR)/CryptRSA.Tpo" -c -o CryptRSA.o `test -f 'crypto/CryptRSA.cpp' || echo '$(srcdir)/'`crypto/CryptRSA.cpp; \
	then mv -f "$(DEPDIR)/CryptRSA.Tpo" "$(DEPDIR)/CryptRSA.Po"; else rm -f "$(DEPDIR)/CryptRSA.Tpo"; exit 1; fi
#	source='crypto/CryptRSA.cpp' object='CryptRSA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptRSA.o `test -f 'crypto/CryptRSA.cpp' || echo '$(srcdir)/'`crypto/CryptRSA.cpp

CryptRSA.obj: crypto/CryptRSA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptRSA.obj -MD -MP -MF "$(DEPDIR)/CryptRSA.Tpo" -c -o CryptRSA.obj `if test -f 'crypto/CryptRSA.cpp'; then $(CYGPATH_W) 'crypto/CryptRSA.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptRSA.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptRSA.Tpo" "$(DEPDIR)/CryptRSA.Po"; else rm -f "$(DEPDIR)/CryptRSA.Tpo"; exit 1; fi
#	source='crypto/CryptRSA.cpp' object='CryptRSA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptRSA.obj `if test -f 'crypto/CryptRSA.cpp'; then $(CYGPATH_W) 'crypto/CryptRSA.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptRSA.cpp'; fi`

CryptRand.o: crypto/CryptRand.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptRand.o -MD -MP -MF "$(DEPDIR)/CryptRand.Tpo" -c -o CryptRand.o `test -f 'crypto/CryptRand.cpp' || echo '$(srcdir)/'`crypto/CryptRand.cpp; \
	then mv -f "$(DEPDIR)/CryptRand.Tpo" "$(DEPDIR)/CryptRand.Po"; else rm -f "$(DEPDIR)/CryptRand.Tpo"; exit 1; fi
#	source='crypto/CryptRand.cpp' object='CryptRand.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptRand.o `test -f 'crypto/CryptRand.cpp' || echo '$(srcdir)/'`crypto/CryptRand.cpp

CryptRand.obj: crypto/CryptRand.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptRand.obj -MD -MP -MF "$(DEPDIR)/CryptRand.Tpo" -c -o CryptRand.obj `if test -f 'crypto/CryptRand.cpp'; then $(CYGPATH_W) 'crypto/CryptRand.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptRand.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptRand.Tpo" "$(DEPDIR)/CryptRand.Po"; else rm -f "$(DEPDIR)/CryptRand.Tpo"; exit 1; fi
#	source='crypto/CryptRand.cpp' object='CryptRand.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptRand.obj `if test -f 'crypto/CryptRand.cpp'; then $(CYGPATH_W) 'crypto/CryptRand.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptRand.cpp'; fi`

CryptSH512.o: crypto/CryptSH512.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptSH512.o -MD -MP -MF "$(DEPDIR)/CryptSH512.Tpo" -c -o CryptSH512.o `test -f 'crypto/CryptSH512.cpp' || echo '$(srcdir)/'`crypto/CryptSH512.cpp; \
	then mv -f "$(DEPDIR)/CryptSH512.Tpo" "$(DEPDIR)/CryptSH512.Po"; else rm -f "$(DEPDIR)/CryptSH512.Tpo"; exit 1; fi
#	source='crypto/CryptSH512.cpp' object='CryptSH512.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptSH512.o `test -f 'crypto/CryptSH512.cpp' || echo '$(srcdir)/'`crypto/CryptSH512.cpp

CryptSH512.obj: crypto/CryptSH512.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptSH512.obj -MD -MP -MF "$(DEPDIR)/CryptSH512.Tpo" -c -o CryptSH512.obj `if test -f 'crypto/CryptSH512.cpp'; then $(CYGPATH_W) 'crypto/CryptSH512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptSH512.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptSH512.Tpo" "$(DEPDIR)/CryptSH512.Po"; else rm -f "$(DEPDIR)/CryptSH512.Tpo"; exit 1; fi
#	source='crypto/CryptSH512.cpp' object='CryptSH512.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptSH512.obj `if test -f 'crypto/CryptSH512.cpp'; then $(CYGPATH_W) 'crypto/CryptSH512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptSH512.cpp'; fi`

CryptSHA.o: crypto/CryptSHA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptSHA.o -MD -MP -MF "$(DEPDIR)/CryptSHA.Tpo" -c -o CryptSHA.o `test -f 'crypto/CryptSHA.cpp' || echo '$(srcdir)/'`crypto/CryptSHA.cpp; \
	then mv -f "$(DEPDIR)/CryptSHA.Tpo" "$(DEPDIR)/CryptSHA.Po"; else rm -f "$(DEPDIR)/CryptSHA.Tpo"; exit 1; fi
#	source='crypto/CryptSHA.cpp' object='CryptSHA.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptSHA.o `test -f 'crypto/CryptSHA.cpp' || echo '$(srcdir)/'`crypto/CryptSHA.cpp

CryptSHA.obj: crypto/CryptSHA.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CryptSHA.obj -MD -MP -MF "$(DEPDIR)/CryptSHA.Tpo" -c -o CryptSHA.obj `if test -f 'crypto/CryptSHA.cpp'; then $(CYGPATH_W) 'crypto/CryptSHA.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptSHA.cpp'; fi`; \
	then mv -f "$(DEPDIR)/CryptSHA.Tpo" "$(DEPDIR)/CryptSHA.Po"; else rm -f "$(DEPDIR)/CryptSHA.Tpo"; exit 1; fi
#	source='crypto/CryptSHA.cpp' object='CryptSHA.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CryptSHA.obj `if test -f 'crypto/CryptSHA.cpp'; then $(CYGPATH_W) 'crypto/CryptSHA.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/CryptSHA.cpp'; fi`

algebra.o: crypto51/algebra.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT algebra.o -MD -MP -MF "$(DEPDIR)/algebra.Tpo" -c -o algebra.o `test -f 'crypto51/algebra.cpp' || echo '$(srcdir)/'`crypto51/algebra.cpp; \
	then mv -f "$(DEPDIR)/algebra.Tpo" "$(DEPDIR)/algebra.Po"; else rm -f "$(DEPDIR)/algebra.Tpo"; exit 1; fi
#	source='crypto51/algebra.cpp' object='algebra.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o algebra.o `test -f 'crypto51/algebra.cpp' || echo '$(srcdir)/'`crypto51/algebra.cpp

algebra.obj: crypto51/algebra.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT algebra.obj -MD -MP -MF "$(DEPDIR)/algebra.Tpo" -c -o algebra.obj `if test -f 'crypto51/algebra.cpp'; then $(CYGPATH_W) 'crypto51/algebra.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/algebra.cpp'; fi`; \
	then mv -f "$(DEPDIR)/algebra.Tpo" "$(DEPDIR)/algebra.Po"; else rm -f "$(DEPDIR)/algebra.Tpo"; exit 1; fi
#	source='crypto51/algebra.cpp' object='algebra.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o algebra.obj `if test -f 'crypto51/algebra.cpp'; then $(CYGPATH_W) 'crypto51/algebra.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/algebra.cpp'; fi`

algparam.o: crypto51/algparam.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT algparam.o -MD -MP -MF "$(DEPDIR)/algparam.Tpo" -c -o algparam.o `test -f 'crypto51/algparam.cpp' || echo '$(srcdir)/'`crypto51/algparam.cpp; \
	then mv -f "$(DEPDIR)/algparam.Tpo" "$(DEPDIR)/algparam.Po"; else rm -f "$(DEPDIR)/algparam.Tpo"; exit 1; fi
#	source='crypto51/algparam.cpp' object='algparam.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o algparam.o `test -f 'crypto51/algparam.cpp' || echo '$(srcdir)/'`crypto51/algparam.cpp

algparam.obj: crypto51/algparam.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT algparam.obj -MD -MP -MF "$(DEPDIR)/algparam.Tpo" -c -o algparam.obj `if test -f 'crypto51/algparam.cpp'; then $(CYGPATH_W) 'crypto51/algparam.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/algparam.cpp'; fi`; \
	then mv -f "$(DEPDIR)/algparam.Tpo" "$(DEPDIR)/algparam.Po"; else rm -f "$(DEPDIR)/algparam.Tpo"; exit 1; fi
#	source='crypto51/algparam.cpp' object='algparam.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o algparam.obj `if test -f 'crypto51/algparam.cpp'; then $(CYGPATH_W) 'crypto51/algparam.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/algparam.cpp'; fi`

asn.o: crypto51/asn.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT asn.o -MD -MP -MF "$(DEPDIR)/asn.Tpo" -c -o asn.o `test -f 'crypto51/asn.cpp' || echo '$(srcdir)/'`crypto51/asn.cpp; \
	then mv -f "$(DEPDIR)/asn.Tpo" "$(DEPDIR)/asn.Po"; else rm -f "$(DEPDIR)/asn.Tpo"; exit 1; fi
#	source='crypto51/asn.cpp' object='asn.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o asn.o `test -f 'crypto51/asn.cpp' || echo '$(srcdir)/'`crypto51/asn.cpp

asn.obj: crypto51/asn.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT asn.obj -MD -MP -MF "$(DEPDIR)/asn.Tpo" -c -o asn.obj `if test -f 'crypto51/asn.cpp'; then $(CYGPATH_W) 'crypto51/asn.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/asn.cpp'; fi`; \
	then mv -f "$(DEPDIR)/asn.Tpo" "$(DEPDIR)/asn.Po"; else rm -f "$(DEPDIR)/asn.Tpo"; exit 1; fi
#	source='crypto51/asn.cpp' object='asn.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o asn.obj `if test -f 'crypto51/asn.cpp'; then $(CYGPATH_W) 'crypto51/asn.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/asn.cpp'; fi`

cryptlib.o: crypto51/cryptlib.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cryptlib.o -MD -MP -MF "$(DEPDIR)/cryptlib.Tpo" -c -o cryptlib.o `test -f 'crypto51/cryptlib.cpp' || echo '$(srcdir)/'`crypto51/cryptlib.cpp; \
	then mv -f "$(DEPDIR)/cryptlib.Tpo" "$(DEPDIR)/cryptlib.Po"; else rm -f "$(DEPDIR)/cryptlib.Tpo"; exit 1; fi
#	source='crypto51/cryptlib.cpp' object='cryptlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cryptlib.o `test -f 'crypto51/cryptlib.cpp' || echo '$(srcdir)/'`crypto51/cryptlib.cpp

cryptlib.obj: crypto51/cryptlib.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cryptlib.obj -MD -MP -MF "$(DEPDIR)/cryptlib.Tpo" -c -o cryptlib.obj `if test -f 'crypto51/cryptlib.cpp'; then $(CYGPATH_W) 'crypto51/cryptlib.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/cryptlib.cpp'; fi`; \
	then mv -f "$(DEPDIR)/cryptlib.Tpo" "$(DEPDIR)/cryptlib.Po"; else rm -f "$(DEPDIR)/cryptlib.Tpo"; exit 1; fi
#	source='crypto51/cryptlib.cpp' object='cryptlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cryptlib.obj `if test -f 'crypto51/cryptlib.cpp'; then $(CYGPATH_W) 'crypto51/cryptlib.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/cryptlib.cpp'; fi`

files.o: crypto51/files.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT files.o -MD -MP -MF "$(DEPDIR)/files.Tpo" -c -o files.o `test -f 'crypto51/files.cpp' || echo '$(srcdir)/'`crypto51/files.cpp; \
	then mv -f "$(DEPDIR)/files.Tpo" "$(DEPDIR)/files.Po"; else rm -f "$(DEPDIR)/files.Tpo"; exit 1; fi
#	source='crypto51/files.cpp' object='files.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o files.o `test -f 'crypto51/files.cpp' || echo '$(srcdir)/'`crypto51/files.cpp

files.obj: crypto51/files.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT files.obj -MD -MP -MF "$(DEPDIR)/files.Tpo" -c -o files.obj `if test -f 'crypto51/files.cpp'; then $(CYGPATH_W) 'crypto51/files.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/files.cpp'; fi`; \
	then mv -f "$(DEPDIR)/files.Tpo" "$(DEPDIR)/files.Po"; else rm -f "$(DEPDIR)/files.Tpo"; exit 1; fi
#	source='crypto51/files.cpp' object='files.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o files.obj `if test -f 'crypto51/files.cpp'; then $(CYGPATH_W) 'crypto51/files.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/files.cpp'; fi`

filters.o: crypto51/filters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT filters.o -MD -MP -MF "$(DEPDIR)/filters.Tpo" -c -o filters.o `test -f 'crypto51/filters.cpp' || echo '$(srcdir)/'`crypto51/filters.cpp; \
	then mv -f "$(DEPDIR)/filters.Tpo" "$(DEPDIR)/filters.Po"; else rm -f "$(DEPDIR)/filters.Tpo"; exit 1; fi
#	source='crypto51/filters.cpp' object='filters.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o filters.o `test -f 'crypto51/filters.cpp' || echo '$(srcdir)/'`crypto51/filters.cpp

filters.obj: crypto51/filters.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT filters.obj -MD -MP -MF "$(DEPDIR)/filters.Tpo" -c -o filters.obj `if test -f 'crypto51/filters.cpp'; then $(CYGPATH_W) 'crypto51/filters.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/filters.cpp'; fi`; \
	then mv -f "$(DEPDIR)/filters.Tpo" "$(DEPDIR)/filters.Po"; else rm -f "$(DEPDIR)/filters.Tpo"; exit 1; fi
#	source='crypto51/filters.cpp' object='filters.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o filters.obj `if test -f 'crypto51/filters.cpp'; then $(CYGPATH_W) 'crypto51/filters.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/filters.cpp'; fi`

integer.o: crypto51/integer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT integer.o -MD -MP -MF "$(DEPDIR)/integer.Tpo" -c -o integer.o `test -f 'crypto51/integer.cpp' || echo '$(srcdir)/'`crypto51/integer.cpp; \
	then mv -f "$(DEPDIR)/integer.Tpo" "$(DEPDIR)/integer.Po"; else rm -f "$(DEPDIR)/integer.Tpo"; exit 1; fi
#	source='crypto51/integer.cpp' object='integer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o integer.o `test -f 'crypto51/integer.cpp' || echo '$(srcdir)/'`crypto51/integer.cpp

integer.obj: crypto51/integer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT integer.obj -MD -MP -MF "$(DEPDIR)/integer.Tpo" -c -o integer.obj `if test -f 'crypto51/integer.cpp'; then $(CYGPATH_W) 'crypto51/integer.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/integer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/integer.Tpo" "$(DEPDIR)/integer.Po"; else rm -f "$(DEPDIR)/integer.Tpo"; exit 1; fi
#	source='crypto51/integer.cpp' object='integer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o integer.obj `if test -f 'crypto51/integer.cpp'; then $(CYGPATH_W) 'crypto51/integer.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/integer.cpp'; fi`

iterhash.o: crypto51/iterhash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT iterhash.o -MD -MP -MF "$(DEPDIR)/iterhash.Tpo" -c -o iterhash.o `test -f 'crypto51/iterhash.cpp' || echo '$(srcdir)/'`crypto51/iterhash.cpp; \
	then mv -f "$(DEPDIR)/iterhash.Tpo" "$(DEPDIR)/iterhash.Po"; else rm -f "$(DEPDIR)/iterhash.Tpo"; exit 1; fi
#	source='crypto51/iterhash.cpp' object='iterhash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o iterhash.o `test -f 'crypto51/iterhash.cpp' || echo '$(srcdir)/'`crypto51/iterhash.cpp

iterhash.obj: crypto51/iterhash.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT iterhash.obj -MD -MP -MF "$(DEPDIR)/iterhash.Tpo" -c -o iterhash.obj `if test -f 'crypto51/iterhash.cpp'; then $(CYGPATH_W) 'crypto51/iterhash.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/iterhash.cpp'; fi`; \
	then mv -f "$(DEPDIR)/iterhash.Tpo" "$(DEPDIR)/iterhash.Po"; else rm -f "$(DEPDIR)/iterhash.Tpo"; exit 1; fi
#	source='crypto51/iterhash.cpp' object='iterhash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o iterhash.obj `if test -f 'crypto51/iterhash.cpp'; then $(CYGPATH_W) 'crypto51/iterhash.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/iterhash.cpp'; fi`

misc.o: crypto51/misc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT misc.o -MD -MP -MF "$(DEPDIR)/misc.Tpo" -c -o misc.o `test -f 'crypto51/misc.cpp' || echo '$(srcdir)/'`crypto51/misc.cpp; \
	then mv -f "$(DEPDIR)/misc.Tpo" "$(DEPDIR)/misc.Po"; else rm -f "$(DEPDIR)/misc.Tpo"; exit 1; fi
#	source='crypto51/misc.cpp' object='misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o misc.o `test -f 'crypto51/misc.cpp' || echo '$(srcdir)/'`crypto51/misc.cpp

misc.obj: crypto51/misc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT misc.obj -MD -MP -MF "$(DEPDIR)/misc.Tpo" -c -o misc.obj `if test -f 'crypto51/misc.cpp'; then $(CYGPATH_W) 'crypto51/misc.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/misc.cpp'; fi`; \
	then mv -f "$(DEPDIR)/misc.Tpo" "$(DEPDIR)/misc.Po"; else rm -f "$(DEPDIR)/misc.Tpo"; exit 1; fi
#	source='crypto51/misc.cpp' object='misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o misc.obj `if test -f 'crypto51/misc.cpp'; then $(CYGPATH_W) 'crypto51/misc.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/misc.cpp'; fi`

mqueue.o: crypto51/mqueue.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mqueue.o -MD -MP -MF "$(DEPDIR)/mqueue.Tpo" -c -o mqueue.o `test -f 'crypto51/mqueue.cpp' || echo '$(srcdir)/'`crypto51/mqueue.cpp; \
	then mv -f "$(DEPDIR)/mqueue.Tpo" "$(DEPDIR)/mqueue.Po"; else rm -f "$(DEPDIR)/mqueue.Tpo"; exit 1; fi
#	source='crypto51/mqueue.cpp' object='mqueue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mqueue.o `test -f 'crypto51/mqueue.cpp' || echo '$(srcdir)/'`crypto51/mqueue.cpp

mqueue.obj: crypto51/mqueue.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT mqueue.obj -MD -MP -MF "$(DEPDIR)/mqueue.Tpo" -c -o mqueue.obj `if test -f 'crypto51/mqueue.cpp'; then $(CYGPATH_W) 'crypto51/mqueue.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/mqueue.cpp'; fi`; \
	then mv -f "$(DEPDIR)/mqueue.Tpo" "$(DEPDIR)/mqueue.Po"; else rm -f "$(DEPDIR)/mqueue.Tpo"; exit 1; fi
#	source='crypto51/mqueue.cpp' object='mqueue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o mqueue.obj `if test -f 'crypto51/mqueue.cpp'; then $(CYGPATH_W) 'crypto51/mqueue.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/mqueue.cpp'; fi`

nbtheory.o: crypto51/nbtheory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nbtheory.o -MD -MP -MF "$(DEPDIR)/nbtheory.Tpo" -c -o nbtheory.o `test -f 'crypto51/nbtheory.cpp' || echo '$(srcdir)/'`crypto51/nbtheory.cpp; \
	then mv -f "$(DEPDIR)/nbtheory.Tpo" "$(DEPDIR)/nbtheory.Po"; else rm -f "$(DEPDIR)/nbtheory.Tpo"; exit 1; fi
#	source='crypto51/nbtheory.cpp' object='nbtheory.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nbtheory.o `test -f 'crypto51/nbtheory.cpp' || echo '$(srcdir)/'`crypto51/nbtheory.cpp

nbtheory.obj: crypto51/nbtheory.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT nbtheory.obj -MD -MP -MF "$(DEPDIR)/nbtheory.Tpo" -c -o nbtheory.obj `if test -f 'crypto51/nbtheory.cpp'; then $(CYGPATH_W) 'crypto51/nbtheory.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/nbtheory.cpp'; fi`; \
	then mv -f "$(DEPDIR)/nbtheory.Tpo" "$(DEPDIR)/nbtheory.Po"; else rm -f "$(DEPDIR)/nbtheory.Tpo"; exit 1; fi
#	source='crypto51/nbtheory.cpp' object='nbtheory.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o nbtheory.obj `if test -f 'crypto51/nbtheory.cpp'; then $(CYGPATH_W) 'crypto51/nbtheory.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/nbtheory.cpp'; fi`

osrng.o: crypto51/osrng.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT osrng.o -MD -MP -MF "$(DEPDIR)/osrng.Tpo" -c -o osrng.o `test -f 'crypto51/osrng.cpp' || echo '$(srcdir)/'`crypto51/osrng.cpp; \
	then mv -f "$(DEPDIR)/osrng.Tpo" "$(DEPDIR)/osrng.Po"; else rm -f "$(DEPDIR)/osrng.Tpo"; exit 1; fi
#	source='crypto51/osrng.cpp' object='osrng.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o osrng.o `test -f 'crypto51/osrng.cpp' || echo '$(srcdir)/'`crypto51/osrng.cpp

osrng.obj: crypto51/osrng.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT osrng.obj -MD -MP -MF "$(DEPDIR)/osrng.Tpo" -c -o osrng.obj `if test -f 'crypto51/osrng.cpp'; then $(CYGPATH_W) 'crypto51/osrng.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/osrng.cpp'; fi`; \
	then mv -f "$(DEPDIR)/osrng.Tpo" "$(DEPDIR)/osrng.Po"; else rm -f "$(DEPDIR)/osrng.Tpo"; exit 1; fi
#	source='crypto51/osrng.cpp' object='osrng.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o osrng.obj `if test -f 'crypto51/osrng.cpp'; then $(CYGPATH_W) 'crypto51/osrng.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/osrng.cpp'; fi`

pkcspad.o: crypto51/pkcspad.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pkcspad.o -MD -MP -MF "$(DEPDIR)/pkcspad.Tpo" -c -o pkcspad.o `test -f 'crypto51/pkcspad.cpp' || echo '$(srcdir)/'`crypto51/pkcspad.cpp; \
	then mv -f "$(DEPDIR)/pkcspad.Tpo" "$(DEPDIR)/pkcspad.Po"; else rm -f "$(DEPDIR)/pkcspad.Tpo"; exit 1; fi
#	source='crypto51/pkcspad.cpp' object='pkcspad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pkcspad.o `test -f 'crypto51/pkcspad.cpp' || echo '$(srcdir)/'`crypto51/pkcspad.cpp

pkcspad.obj: crypto51/pkcspad.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pkcspad.obj -MD -MP -MF "$(DEPDIR)/pkcspad.Tpo" -c -o pkcspad.obj `if test -f 'crypto51/pkcspad.cpp'; then $(CYGPATH_W) 'crypto51/pkcspad.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/pkcspad.cpp'; fi`; \
	then mv -f "$(DEPDIR)/pkcspad.Tpo" "$(DEPDIR)/pkcspad.Po"; else rm -f "$(DEPDIR)/pkcspad.Tpo"; exit 1; fi
#	source='crypto51/pkcspad.cpp' object='pkcspad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pkcspad.obj `if test -f 'crypto51/pkcspad.cpp'; then $(CYGPATH_W) 'crypto51/pkcspad.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/pkcspad.cpp'; fi`

pubkey.o: crypto51/pubkey.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pubkey.o -MD -MP -MF "$(DEPDIR)/pubkey.Tpo" -c -o pubkey.o `test -f 'crypto51/pubkey.cpp' || echo '$(srcdir)/'`crypto51/pubkey.cpp; \
	then mv -f "$(DEPDIR)/pubkey.Tpo" "$(DEPDIR)/pubkey.Po"; else rm -f "$(DEPDIR)/pubkey.Tpo"; exit 1; fi
#	source='crypto51/pubkey.cpp' object='pubkey.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pubkey.o `test -f 'crypto51/pubkey.cpp' || echo '$(srcdir)/'`crypto51/pubkey.cpp

pubkey.obj: crypto51/pubkey.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pubkey.obj -MD -MP -MF "$(DEPDIR)/pubkey.Tpo" -c -o pubkey.obj `if test -f 'crypto51/pubkey.cpp'; then $(CYGPATH_W) 'crypto51/pubkey.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/pubkey.cpp'; fi`; \
	then mv -f "$(DEPDIR)/pubkey.Tpo" "$(DEPDIR)/pubkey.Po"; else rm -f "$(DEPDIR)/pubkey.Tpo"; exit 1; fi
#	source='crypto51/pubkey.cpp' object='pubkey.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pubkey.obj `if test -f 'crypto51/pubkey.cpp'; then $(CYGPATH_W) 'crypto51/pubkey.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/pubkey.cpp'; fi`

queue.o: crypto51/queue.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT queue.o -MD -MP -MF "$(DEPDIR)/queue.Tpo" -c -o queue.o `test -f 'crypto51/queue.cpp' || echo '$(srcdir)/'`crypto51/queue.cpp; \
	then mv -f "$(DEPDIR)/queue.Tpo" "$(DEPDIR)/queue.Po"; else rm -f "$(DEPDIR)/queue.Tpo"; exit 1; fi
#	source='crypto51/queue.cpp' object='queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o queue.o `test -f 'crypto51/queue.cpp' || echo '$(srcdir)/'`crypto51/queue.cpp

queue.obj: crypto51/queue.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT queue.obj -MD -MP -MF "$(DEPDIR)/queue.Tpo" -c -o queue.obj `if test -f 'crypto51/queue.cpp'; then $(CYGPATH_W) 'crypto51/queue.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/queue.cpp'; fi`; \
	then mv -f "$(DEPDIR)/queue.Tpo" "$(DEPDIR)/queue.Po"; else rm -f "$(DEPDIR)/queue.Tpo"; exit 1; fi
#	source='crypto51/queue.cpp' object='queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o queue.obj `if test -f 'crypto51/queue.cpp'; then $(CYGPATH_W) 'crypto51/queue.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/queue.cpp'; fi`

rsa.o: crypto51/rsa.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rsa.o -MD -MP -MF "$(DEPDIR)/rsa.Tpo" -c -o rsa.o `test -f 'crypto51/rsa.cpp' || echo '$(srcdir)/'`crypto51/rsa.cpp; \
	then mv -f "$(DEPDIR)/rsa.Tpo" "$(DEPDIR)/rsa.Po"; else rm -f "$(DEPDIR)/rsa.Tpo"; exit 1; fi
#	source='crypto51/rsa.cpp' object='rsa.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rsa.o `test -f 'crypto51/rsa.cpp' || echo '$(srcdir)/'`crypto51/rsa.cpp

rsa.obj: crypto51/rsa.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rsa.obj -MD -MP -MF "$(DEPDIR)/rsa.Tpo" -c -o rsa.obj `if test -f 'crypto51/rsa.cpp'; then $(CYGPATH_W) 'crypto51/rsa.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/rsa.cpp'; fi`; \
	then mv -f "$(DEPDIR)/rsa.Tpo" "$(DEPDIR)/rsa.Po"; else rm -f "$(DEPDIR)/rsa.Tpo"; exit 1; fi
#	source='crypto51/rsa.cpp' object='rsa.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rsa.obj `if test -f 'crypto51/rsa.cpp'; then $(CYGPATH_W) 'crypto51/rsa.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/rsa.cpp'; fi`

sha.o: crypto51/sha.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sha.o -MD -MP -MF "$(DEPDIR)/sha.Tpo" -c -o sha.o `test -f 'crypto51/sha.cpp' || echo '$(srcdir)/'`crypto51/sha.cpp; \
	then mv -f "$(DEPDIR)/sha.Tpo" "$(DEPDIR)/sha.Po"; else rm -f "$(DEPDIR)/sha.Tpo"; exit 1; fi
#	source='crypto51/sha.cpp' object='sha.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sha.o `test -f 'crypto51/sha.cpp' || echo '$(srcdir)/'`crypto51/sha.cpp

sha.obj: crypto51/sha.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT sha.obj -MD -MP -MF "$(DEPDIR)/sha.Tpo" -c -o sha.obj `if test -f 'crypto51/sha.cpp'; then $(CYGPATH_W) 'crypto51/sha.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/sha.cpp'; fi`; \
	then mv -f "$(DEPDIR)/sha.Tpo" "$(DEPDIR)/sha.Po"; else rm -f "$(DEPDIR)/sha.Tpo"; exit 1; fi
#	source='crypto51/sha.cpp' object='sha.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o sha.obj `if test -f 'crypto51/sha.cpp'; then $(CYGPATH_W) 'crypto51/sha.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto51/sha.cpp'; fi`

test_misc.o: tests/test_misc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_misc.o -MD -MP -MF "$(DEPDIR)/test_misc.Tpo" -c -o test_misc.o `test -f 'tests/test_misc.cpp' || echo '$(srcdir)/'`tests/test_misc.cpp; \
	then mv -f "$(DEPDIR)/test_misc.Tpo" "$(DEPDIR)/test_misc.Po"; else rm -f "$(DEPDIR)/test_misc.Tpo"; exit 1; fi
#	source='tests/test_misc.cpp' object='test_misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_misc.o `test -f 'tests/test_misc.cpp' || echo '$(srcdir)/'`tests/test_misc.cpp

test_misc.obj: tests/test_misc.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_misc.obj -MD -MP -MF "$(DEPDIR)/test_misc.Tpo" -c -o test_misc.obj `if test -f 'tests/test_misc.cpp'; then $(CYGPATH_W) 'tests/test_misc.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_misc.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_misc.Tpo" "$(DEPDIR)/test_misc.Po"; else rm -f "$(DEPDIR)/test_misc.Tpo"; exit 1; fi
#	source='tests/test_misc.cpp' object='test_misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_misc.obj `if test -f 'tests/test_misc.cpp'; then $(CYGPATH_W) 'tests/test_misc.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_misc.cpp'; fi`

test_audio_readers.o: tests/test_audio_readers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_audio_readers.o -MD -MP -MF "$(DEPDIR)/test_audio_readers.Tpo" -c -o test_audio_readers.o `test -f 'tests/test_audio_readers.cpp' || echo '$(srcdir)/'`tests/test_audio_readers.cpp; \
	then mv -f "$(DEPDIR)/test_audio_readers.Tpo" "$(DEPDIR)/test_audio_readers.Po"; else rm -f "$(DEPDIR)/test_audio_readers.Tpo"; exit 1; fi
#	source='tests/test_audio_readers.cpp' object='test_audio_readers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_audio_readers.o `test -f 'tests/test_audio_readers.cpp' || echo '$(srcdir)/'`tests/test_audio_readers.cpp

test_audio_readers.obj: tests/test_audio_readers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_audio_readers.obj -MD -MP -MF "$(DEPDIR)/test_audio_readers.Tpo" -c -o test_audio_readers.obj `if test -f 'tests/test_audio_readers.cpp'; then $(CYGPATH_W) 'tests/test_audio_readers.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_audio_readers.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_audio_readers.Tpo" "$(DEPDIR)/test_audio_readers.Po"; else rm -f "$(DEPDIR)/test_audio_readers.Tpo"; exit 1; fi
#	source='tests/test_audio_readers.cpp' object='test_audio_readers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_audio_readers.obj `if test -f 'tests/test_audio_readers.cpp'; then $(CYGPATH_W) 'tests/test_audio_readers.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_audio_readers.cpp'; fi`

test_file_errors.o: tests/test_file_errors.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_file_errors.o -MD -MP -MF "$(DEPDIR)/test_file_errors.Tpo" -c -o test_file_errors.o `test -f 'tests/test_file_errors.cpp' || echo '$(srcdir)/'`tests/test_file_errors.cpp; \
	then mv -f "$(DEPDIR)/test_file_errors.Tpo" "$(DEPDIR)/test_file_errors.Po"; else rm -f "$(DEPDIR)/test_file_errors.Tpo"; exit 1; fi
#	source='tests/test_file_errors.cpp' object='test_file_errors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_file_errors.o `test -f 'tests/test_file_errors.cpp' || echo '$(srcdir)/'`tests/test_file_errors.cpp

test_file_errors.obj: tests/test_file_errors.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_file_errors.obj -MD -MP -MF "$(DEPDIR)/test_file_errors.Tpo" -c -o test_file_errors.obj `if test -f 'tests/test_file_errors.cpp'; then $(CYGPATH_W) 'tests/test_file_errors.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_file_errors.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_file_errors.Tpo" "$(DEPDIR)/test_file_errors.Po"; else rm -f "$(DEPDIR)/test_file_errors.Tpo"; exit 1; fi
#	source='tests/test_file_errors.cpp' object='test_file_errors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_file_errors.obj `if test -f 'tests/test_file_errors.cpp'; then $(CYGPATH_W) 'tests/test_file_errors.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_file_errors.cpp'; fi`

test_file_readers.o: tests/test_file_readers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_file_readers.o -MD -MP -MF "$(DEPDIR)/test_file_readers.Tpo" -c -o test_file_readers.o `test -f 'tests/test_file_readers.cpp' || echo '$(srcdir)/'`tests/test_file_readers.cpp; \
	then mv -f "$(DEPDIR)/test_file_readers.Tpo" "$(DEPDIR)/test_file_readers.Po"; else rm -f "$(DEPDIR)/test_file_readers.Tpo"; exit 1; fi
#	source='tests/test_file_readers.cpp' object='test_file_readers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_file_readers.o `test -f 'tests/test_file_readers.cpp' || echo '$(srcdir)/'`tests/test_file_readers.cpp

test_file_readers.obj: tests/test_file_readers.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_file_readers.obj -MD -MP -MF "$(DEPDIR)/test_file_readers.Tpo" -c -o test_file_readers.obj `if test -f 'tests/test_file_readers.cpp'; then $(CYGPATH_W) 'tests/test_file_readers.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_file_readers.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_file_readers.Tpo" "$(DEPDIR)/test_file_readers.Po"; else rm -f "$(DEPDIR)/test_file_readers.Tpo"; exit 1; fi
#	source='tests/test_file_readers.cpp' object='test_file_readers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_file_readers.obj `if test -f 'tests/test_file_readers.cpp'; then $(CYGPATH_W) 'tests/test_file_readers.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_file_readers.cpp'; fi`

test_threads.o: tests/test_threads.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_threads.o -MD -MP -MF "$(DEPDIR)/test_threads.Tpo" -c -o test_threads.o `test -f 'tests/test_threads.cpp' || echo '$(srcdir)/'`tests/test_threads.cpp; \
	then mv -f "$(DEPDIR)/test_threads.Tpo" "$(DEPDIR)/test_threads.Po"; else rm -f "$(DEPDIR)/test_threads.Tpo"; exit 1; fi
#	source='tests/test_threads.cpp' object='test_threads.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_threads.o `test -f 'tests/test_threads.cpp' || echo '$(srcdir)/'`tests/test_threads.cpp

test_threads.obj: tests/test_threads.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_threads.obj -MD -MP -MF "$(DEPDIR)/test_threads.Tpo" -c -o test_threads.obj `if test -f 'tests/test_threads.cpp'; then $(CYGPATH_W) 'tests/test_threads.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_threads.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_threads.Tpo" "$(DEPDIR)/test_threads.Po"; else rm -f "$(DEPDIR)/test_threads.Tpo"; exit 1; fi
#	source='tests/test_threads.cpp' object='test_threads.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_threads.obj `if test -f 'tests/test_threads.cpp'; then $(CYGPATH_W) 'tests/test_threads.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_threads.cpp'; fi`

test_timing_data.o: tests/test_timing_data.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_timing_data.o -MD -MP -MF "$(DEPDIR)/test_timing_data.Tpo" -c -o test_timing_data.o `test -f 'tests/test_timing_data.cpp' || echo '$(srcdir)/'`tests/test_timing_data.cpp; \
	then mv -f "$(DEPDIR)/test_timing_data.Tpo" "$(DEPDIR)/test_timing_data.Po"; else rm -f "$(DEPDIR)/test_timing_data.Tpo"; exit 1; fi
#	source='tests/test_timing_data.cpp' object='test_timing_data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_timing_data.o `test -f 'tests/test_timing_data.cpp' || echo '$(srcdir)/'`tests/test_timing_data.cpp

test_timing_data.obj: tests/test_timing_data.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT test_timing_data.obj -MD -MP -MF "$(DEPDIR)/test_timing_data.Tpo" -c -o test_timing_data.obj `if test -f 'tests/test_timing_data.cpp'; then $(CYGPATH_W) 'tests/test_timing_data.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_timing_data.cpp'; fi`; \
	then mv -f "$(DEPDIR)/test_timing_data.Tpo" "$(DEPDIR)/test_timing_data.Po"; else rm -f "$(DEPDIR)/test_timing_data.Tpo"; exit 1; fi
#	source='tests/test_timing_data.cpp' object='test_timing_data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o test_timing_data.obj `if test -f 'tests/test_timing_data.cpp'; then $(CYGPATH_W) 'tests/test_timing_data.cpp'; else $(CYGPATH_W) '$(srcdir)/tests/test_timing_data.cpp'; fi`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) config.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-binPROGRAMS clean-generic clean-noinstPROGRAMS ctags \
	distclean distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

tests: $(TESTS)

$(srcdir)/libresample/libresample.a:
	cd $(srcdir)/libresample && autoconf && sh ./configure && make
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
